This page is about ''displaying'' line numbers in a buffer, or otherwise indicating line numbers, ''without'' actually changing the buffer content. If you just want to work on a specific part of the file and you are accustomed to doing that by showing line numbers in the margin, try BasicNarrowing instead.

'''See Also:''' NumberLines will add the line numbers to the buffer content.

==Built-in ways==
See also, from the EmacsManual
* [https://www.gnu.org/software/emacs/manual/html_node/emacs/Position-Info.html Cursor Position Information]
* [https://www.gnu.org/software/emacs/manual/html_node/emacs/Display-Custom.html Customization of Display]
===Display line numbers for every line===
##display-line-numbers-mode## is available since Emacs 26.  For older Emacs, see the section below on ##linum-mode##.

You can enable it globally by appending this to your ##.emacs## file:

<pre>
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
</pre>

To disable it in certain major modes you can redefine ##display-line-numbers--turn-on##:

<pre>
(require 'display-line-numbers)

(defcustom display-line-numbers-exempt-modes
  '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable line numbers."
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "Turn on line numbers except for certain major modes.
Exempt major modes are defined in `display-line-numbers-exempt-modes'."
  (unless (or (minibufferp)
              (member major-mode display-line-numbers-exempt-modes))
    (display-line-numbers-mode)))
</pre>
=== Display the current line number in the mode line===
Use <code>M-x line-number-mode</code>.

=== Display the current line number once===
To display the current line number in the EchoArea, you can
* use <code>M-x what-line</code> command
* use <code>count-lines-page</code> (<kbd>C-x l</kbd>), which reports the total number of lines as well as the numbers of lines before and after the current one.

=== Linum mode===
Obsolete from Emacs 29, see LinumMode.

==line-num==

[[line-num.el]]

==LineNo==
Last year I wrote [http://www.young-0.com/emacs/lineno.el lineno.el], which works on any size files. Rather than making line numbers for the whole buffer, it just displays them for the lines visible in the selected window, updating them as the buffer is edited or the location changed. That way the actual size of the file does not matter. I don't use it much, but it seems to work well.

russell young

On a larger buffer with line numbers, when I do C-x 2 to split the window and then scroll one of them, the numbers in the other window vanish.

Yes, that is the way it works - it draws in the current window. It would not be too hard to make it work in multiple windows, but it didn't really seem necessary to how I wanted to use it. (you would have to use buffer-window-count to find how many and what windows it is showed in, and replace the local variables with lists)

If I had time to go in and fix something, the highest priority would be to make it work with ediff. It has essentially the same problem there, the numbers are updated from inside post-command-hook, if the buffer is changed in some way that is not a command the update function is not called.

ry

[new:SamAsk:2011-10-27] I have added lineno.el to marmalade repo (http://marmalade-repo.org/packages/lineno/0.1) (GOOD LIVE LINK).  The file is in the repo as ".tar", but just change the ending to ".el" - it is not really a TAR file.

[new]
I find that the redraw operation to put in the line numbers makes the text "jitter" uncomfortably to the right as I page up and down the buffer.  First the text is drawn by Emacs, then the line number routine redraws it shifted right to put the line numbers it.  It would be nice to hook into the first rendering, instead of hooking in after the first rendering is already done.  But it does put the line numbers in nicely.

[new]
I tried [tt]linum[/tt], [tt]nlinim[/tt] and [tt]lineno[/tt] on the sqlite-amalgamation file sqlite3.c (5MB, 148784 lines).
[tt]lineno[/tt] is the only one to be usable on my machine (3.5 GHz Intel Core 7).

--  [http://www.emacswiki.org/emacs/priyadarshan priyadarshan] 2014-08-07 13:56 UTC

==LinumPlus==
LinumPlus

==NLinum==

The ##nlinum.el## library, available from GNU ELPA (http://elpa.gnu.org/packages/nlinum.html) is meant as a replacement for linum.el, using the jit-lock infrastructure to fix various corner case bugs in linum.el.  It should usually be about as fast or faster than linum.el.

To precalculate the line number width to avoid horizontal jumps on scrolling:
<pre>
;; Preset `nlinum-format' for minimum width.
(defun my-nlinum-mode-hook ()
  (when nlinum-mode
    (setq-local nlinum-format
                (concat "%" (number-to-string
                             ;; Guesstimate number of buffer lines.
                             (ceiling (log (max 1 (/ (buffer-size) 80)) 10)))
                        "d"))))
(add-hook 'nlinum-mode-hook #'my-nlinum-mode-hook)
</pre>

Note: a previous version set <code>nlinum--width</code> and then
called <code>nlinum-flush</code>, but that can cause problems in
nlinum's timers, see
http://debbugs.gnu.org/cgi/bugreport.cgi?bug=23777.

----

the lastest Nlinum-mode git version(1.6) not worked with emacs deamon mode, use emacsclient to open a file, will result a "*ERROR*: Invalid face: linum" error, following hack worked for me on emacs-version 24.5.1.

<pre>
(defun initialize-nlinum (&optional frame)
  (require 'nlinum)
  (add-hook 'prog-mode-hook 'nlinum-mode))
(when (daemonp)
  (add-hook 'window-setup-hook 'initialize-nlinum)
  (defadvice make-frame (around toggle-nlinum-mode compile activate)
  (nlinum-mode -1) ad-do-it (nlinum-mode 1)))
</pre>

- zw963(Billy)
==Setnu==

If you want to display line numbers for every line you are editing,
take a look at setnu.el by KyleJones.

* http://www.wonderworks.com/download/setnu.el

* Library Lisp:setnu+.el enhances setnu:

** If the current [[Frame]] has only one window, then it adjusts the ''frame size to accomodate the line numbers'' -- that is, it fits the frame to the buffer each time, after displaying or removing the line numbers.
** It improves setnu's ability to deal with [[Face]]s and adding/removing newlines.


[new]
I couldn't find a function to toggle setnu mode on/off, so I wrote one:

(defun toggle-setnu-mode ()
(interactive)
(if setnu-mode
(setnu-mode -1)
(setnu-mode 1)))

I have this bound to C-n.

[new:DrewAdams:2006-06-14 00:17 UTC]
: How hard did you look? ;-) Try command `setnu-mode'. Try, especially, the version of `setnu-mode' defined in Lisp:setnu+.el. -- DrewAdams


=== Problems with setnu ===

* When I tried it (setnu+, I think) on a large file (almost 20,000 lines) it was too slow, it's almost as if Emacs hangs, I wish if this can be fixed -- SysTems

[new:DrewAdams:2006-10-07 15:09 UTC]
: You'll have to provide more information, if you expect help.

## Try setnu without setnu+, to see which library is the problem. Setnu+ is an extension of setnu.
## Try with ##emacs -q##, to see if the problem comes from Emacs and the setnu(+) library or from something in your InitFile.
## Report an exact recipe to either KyleJones (for setnu) or DrewAdams (for setnu+), being sure to specify your Emacs version and the library version/date. You can post the recipe here also -- someone else might have a solution.

: -- DrewAdams

[new]
: Well, first you should know, I am not an expert emacs user (yet), I really think this mode is important especially when debugging script, your eye can quickly go to the line number where the error was reported, and for this, this problem doesn't appear. This problem only appear in large files or very large files.

: To find files on my computer to test this I first issues this command
~$ find ~/ -iname '*txt' -size +500k

: I found the text version of a book I downloaded long ago (and never had the time to read) called Underground by Suelette Dreyfus. You can download the same file from this link
http://www.xs4all.nl/~suelette/underground/underground.txt (it's legally available for free download)

: As for my Emacs configuration, I will try to describe it to my best of knowledge:
My computer have a pentium 3 1 giga hertz processor and 256 MB Ram. It runs debian sarge and linux 2.6 kernel. Emacs version is  "GNU Emacs 21.4.1 (i386-pc-linux-gnu, X toolkit, Xaw3d scroll bars)
of 2005-03-17 on trouble, modified by Debian"

: I downloaded both setnu and setnu+ and put them in a folder on my loadpath. And added (require setnu+) to my InitFile. I am not sure what an extension really means, and I dont fully understand what require really do!

: Anyway, to the interesting part: I opened the underground.txt file. And type M-x setnu-mode. It took emacs almost 4 and a half minutes to show the line numbers. During this time emacs was not responsive at all. I typed M-x setnu-mode again. It took emacs 2 minutes for to remove the numbers (actually it didnt remove them right away, I have to click inside emacs once for it, I clicked inside emacs when I noticed that the processor monitor showed normal activity, during the 4.5 minutes and the other 2 minutes it took emacs to process setnu-mode the processor was at 100%)

: I also tried the same file in Nedit and gvim (to test how long their implementation of showing line numbers take, to see if maybe 4 minutes is normal) in both of them the line number appearance was insantaneous.

: I tried the same file in Xemacs, I think Xemacs use the same startup file as GNU Emacs so I am guessing it is using the same setnu+ script. It took it 15 seconds to show the numbers, but when i typed M-x setnu-mode again the remove the numbers the effect was insantaneous

: The Xemacs version was "XEmacs 21.4 (patch 17) "Jumbo Shrimp" [Lucid] (i386-debian-linux, Mule) of Tue Feb  8 2005 on penell"

: I hope this helps. -- SysTems

[new:DrewAdams:2006-10-09 02:20 UTC]
: Thanks. I don't have an answer for you yet, but it would be good for you to at least determine if you have the same problem when you do ##(require 'setnu)## instead of ##(require 'setnu+)##. If so, then the problem is not in Lisp:setnu+.el. When you use `require', Emacs loads the required library. Library ##setnu+.el## does its own `require' of ##setnu.el##, so that's how ##setnu## gets loaded if you require ##setnu+##.

: So, at least try that, please. If it turns out that the problem is ##setnu+.el## and not ##setnu.el##, then the workaround is to just use ##(require 'setnu)##. I suspect the problem is really in ##setnu.el##, but please find that out.

: If the problem is in ##setnu.el##, then please notify KyleJones (the ##setnu## maintainer). It seems odd that XEmacs would be very fast and GnuEmacs very slow. Perhaps there is a GnuEmacs bug associated with this. It would be worth finding out. -- DrewAdams

[new]
: I retried the test as you suggested with (require setnu) instead of (require setnu+), on both GnuEmacs and XEmacs. And I got the same results 4 minutes for GNU Emacs and almost 10 seconds for XEmacs. (10 seconds is still very poor performance compared to vim or nedit)
: And I also visited KyleJones personal site and I quote from his setnu description this line /"This package is best used on files with a few thousand lines at most, unless you have very fast hardware and are willing to waste it recalculating and redisplaying line numbers."/. So obviously he is aware of the bad performance! -- SysTems

[new:DrewAdams:2006-10-09 23:56 UTC]
: OK, so I guess you got the answer. Sorry about the bad news. You might still send an email to KyleJones, to at least let him know of the incredible performance difference between XEmacs and GnuEmacs. 10 seconds might be tolerable in some contexts (or less, with a smaller file), but 4 minutes is useless. You never know -- perhaps there is a tiny bug that causes this performance decline in GnuEmacs relative to XEmacs. -- DrewAdams

[new]

* (XEmacs) Can anybody confirm my problems described [http://groups.google.de/group/comp.emacs.xemacs/browse_frm/thread/02a6f20d7296d922/6bfe7090d42e1d24 here]?

* (Emacs) Does anybody use setnu successfully with Gnu Emacs?  For me it just f'ups whenever I do some kill'n'yanking.  The line numbers don't show up at all or the appear at the ''end'' of a line and from then are undeletable and remain cluttering the buffer display until I reopen the file. -- StefanKamphausen

[new:DrewAdams:2006-09-12 14:09 UTC]
: I have no such problem. The version of setnu I have is from 1997. Unless someone else here has a suggestion, try emailing help-gnu-emacs@gnu.org or the setnu maintainer (listed in the ##setnu.el##, probably). Do you have the problem when you start with ##emacs -q##? If not, then probably some other library you use is interfering. Does the problem occur in every mode? -- DrewAdams

[new:StefanKamphausen:2006-09-12 19:31 UTC]
: OK, using the stupid approach (emacs -q, manually loading line after line from my init files, each time performing a test for the problem) I found that the following in my custom.el introduces the problems:

(custom-set-variables '(global-font-lock-mode t nil (font-lock)))

: as soon as I load a file containing the above code setnu stops working in Gnu Emacs.  Any pointers?  How do you turn on font lock? -- StefanKamphausen

[new:DrewAdams:2006-09-12 22:53 UTC]
: I turn it on this way: ##(global-font-lock-mode t)##. But see also EnablingFontLock. -- DrewAdams

[new:StefanKamphausen:2006-09-12 20:01 UTC]
: OK, even simpler...

shell> emacs -q
;; in *scratch* type sth with at least two lines:
(let ((x 0))
(print x))
;; go to the beginning
;; M-x mark-sexp, C-w, C-y ... everything is fine.  This is our test
;; Now.. M-x load-library setnu  M-x setnu-mode
;; perform the test... OK
;; type
(global-font-lock-mode 1)
;; C-x C-e
;; perform the test.... OOOps (at least for me).

: Result is shown [http://www.skamphausen.de/downloads/setnu-err.png here]

[new:DrewAdams:2006-09-12 22:58 UTC]
: Yes, the same thing happens to me. However, I don't have that problem when I use Lisp:setnu+.el (which uses ##setnu.el##). See above, where it says that Lisp:setnu+.el fixes problems with adding/removing newlines. -- DrewAdams

[new]
: I will give it a try... -- StefanKamphausen

=== Horizontal frame resize problem with setnu+==
I tried using setnu+ with Aquamacs and when I add newlines to the current buffer, the frame gets wider.
(if I delete the newline, it does not decrease the width framesize)

This is fixed if you customize the variable setnu+-fit-frame-flag to nil

(custom-set-variables
'(setnu+-fit-frame-flag nil))

this will leave the frame alone, and everything is fine.

-- V.Tron

=== Problems with Soft wrap and syntax coloring==

In soft wrap mode the wrapped line goes under the linenumbers which gives the impression that line numbers are part of the buffer.
Also, line numbers participate in syntax coloring which I think is basically wrong.

The highlight problem can be rectified by assigning the line number extent to a new customizable face.
I sent this very simple patch to the author who will incorporate it in a later release.

According to the author of sentu+, there is no easy way to get the correct wrapped line behaviour fixed.
In fact, the proper place for line-numbers would be on the fringe, not the buffer proper.
I am truely surprised noone ever needed this basic feature of a code editor.

-- V.Tron

==XEmacs line-numbers-mode==

JerryChen had [http://www.geocities.ws/gchen275/xemacs/ a line-numbers-mode on Geocities]. It seems to be [[XEmacs]] specific.
[http://www.geocities.ws/gchen275/xemacs/line-numbers-mode.gif Screenshot].

----
CategoryDisplay
