: ''See GoMode if you're interested in the game Go.''

This page is about the programming language [https://en.wikipedia.org/wiki/Go_%28programming_language%29 Go].

Getting a mode for Go and an intro on how to use it:

* [http://dominik.honnef.co/posts/2013/03/writing_go_in_emacs/ Writing Go in Emacs] by Dominik Honnef
* [https://github.com/dominikh/go-mode.el go-mode.el] by Dominik Honnef, on GitHub

go-mode covers the basic features you need for working with the Go code but adds some extended things like imports managing or interacting with play.golang.org. You may also find useful to add the additional features noted below.

== Code autocompletion ==

* With company-mode: ''company-go''
* With autocomplete-mode: ''go-autocomplete''
* Standalone completion: ''go-complete''

You would like [https://github.com/mdempsky/gocode gocode] utility for autocompletion.

== Code analysis and refactoring ==

* ''go-guru'' mode + [https://godoc.org/golang.org/x/tools/cmd/guru guru] utility.
* [https://github.com/emacsmirror/godoctor godoctor.el] + [http://gorefactor.org/ godoctor] utility.

== Errors checking ==

* [https://github.com/favadi/flycheck-gometalinter flycheck-gometalinter]

== Debugging ==

* [https://github.com/benma/go-dlv.el/ delve debugger support]

== Playground ==

go-mode can ability to interact with play.golang.org but there are nice modes that setup comfortable local playground.

* [https://github.com/grafov/go-playground go-playground]
* [https://github.com/shosti/go-scratch.el go-scratch]

== Code snippets ==

There are several repos with Go snippets for use with ''yasnippet''.

== go test ==

''M-x compile'' can automatically highlight and link files in ''go test'' output,
with the addition of a regexp to recognize them:

    (add-to-list 'compilation-error-regexp-alist 'gotest)
    (add-to-list 'compilation-error-regexp-alist-alist '(gotest "^    \\(\\([^:\n]+\\):\\([0-9]+\\)\\)" 2 3 nil nil 1))
    (add-to-list 'compilation-error-regexp-alist 'gotraceback)
    (add-to-list 'compilation-error-regexp-alist-alist '(gotraceback "^\t\\(\\([^\n\t]+\\):\\([0-9]+\\)\\)\\( \\+0x[0-9a-f]+\\)?$" 2 3 nil (nil . 4) 1))

----
ProgrammingModes
