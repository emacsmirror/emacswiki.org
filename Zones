This page is about library '''##zones.el##''', which lets you easily define and subsequently act on multiple zones of buffer text --- in effect, multiple [[region]]s.

You can get '''##zones.el##''' from Emacs Wiki or GNU ELPA:

* <tt>[[zones.el]]</tt> from Emacs Wiki
* <tt>[[https://elpa.gnu.org/packages/zones.html|zones.el]]</tt> from GNU ELPA

The instance on Emacs Wiki might sometimes be more recent, but major changes (named ''versions'') are posted to GNU ELPA.

(If you use Emacs 20 or 21 then you can use <tt>[[zones20.el]]</tt> instead. It has a subset of the <tt>[[zones.el]]</tt> features.)

You can think of zones as enlarging
the notion of ''region''.  A set
of buffer zones is, in effect, a (typically) noncontiguous
"region" of text.

The content of a ''zone'' is any contiguous stretch of buffer text.


[:ZonesAndNoncontiguousRegions]
A set of zones differs from what Emacs calls a '''noncontiguous region''' in these ways:

* The zones in a set (or list) of zones can be adjacent or overlap,
and their order in the set is typically not important.
A noncontiguous region corresponds instead to what results from
''coalescing'' (uniting) a set of zones: a sequence of ''disjoint'' zones,
in buffer order, that is, ''ordered'' by their cars.

* The Lisp representations of a zone and a
segment of a noncontiguous region each record two buffer
positions, but a zone can also include a list of additional
information (whatever you like).
A noncontiguous-region segment is a cons ##(BEGIN . END)##, with ##BEGIN##
<= ##END##.  A zone is a list ##(LIMIT1 LIMIT2 . EXTRA)## of two positions
optionally followed by a list of extra stuff (any Lisp objects).
And as stated above, the zone limits need not be in ascending
order.

* Each buffer position of a zone can be
a marker, which means that a list of zones can specify zones in
different buffers.  A zone position can also be a ''readable marker'',
which is a Lisp [[sexp]] that can be written to disk (e.g., as part of
a bookmark or saved variable), and restored in a later Emacs
session by reading the file where it is saved.

Commands that use zones typically act on ''izones'', which are just zones that are labeled with a numeric identifier (a negative integer).

[:ZonesAndOverlays]
Zones have even more in common with Emacs [[overlay]]s than they do
with segments of a noncontiguous region. An overlay has an
associated buffer, two limits (start and end), and an optional list of
properties.

Zones differ from overlays in these ways:

* A zone can have an identifier (izone).
* A zone can have a readable Lisp form, by using numbers or readable markers.
* A zone need not be specific to a particular buffer.  If a zone's
positions are numbers instead of markers then you can use it in
any buffer.

You can create zones from overlays, and vice versa.  You can also unite (coalesce) overlays or zones that overlap or are adjacent.

When creating zones from overlays, the overlay property list becomes the ##EXTRA## information
of the resulting zone: ##(LIMIT1 LIMIT2 . EXTRA)##.

When creating overlays from zones, any list of ##EXTRA## zone
information is used as the property list of the resulting overlay.






[:WhatYouCanDoWithZones]
You can do the following with a list of zones:

* Sort them.
* Unite (coalesce) adjacent or overlapping zones (which includes sorting them).
* Intersect them.
* [[Narrowing|Narrow]] the buffer to zones in the list - see '''MultipleNarrowings'''.
* Select zones in the list as the active [[region]].  Cycle among regions.
* Search them (they are automatically united first).  For this
you need library <tt>[[isearch-prop.el]]</tt> (see [[Isearch+]]).
* Highlight and unhighlight them.  (For this you need the [[HighlightLibrary|Highlight]] library (<tt>[[highlight.el]]</tt>) or library <tt>[[facemenu+.el]]</tt>.
* Add the active [[region]] to a list of zones.
* Add the region to a list of zones, and then unite (coalesce) the
zones.
* Delete a zone from a list of zones.
* Clone a zones variable to another one, so the clone has the same
zones.
* Clone a zones variable and then unite the zones of the clone.
* Make a list-of-zones variable persistent, in a bookmark.  Use the
bookmark to restore it in a subsequent Emacs session.  Apply arbitrary tags to the bookmark; that is, tag a set of zones. For this
you need library [[Bookmark+]].

* Query-replace over them (Emacs 25 and later).




[:ZoneCommandsAndKeys]
[:zz-select-zone-by-id-and-text]
[:zz-add-zone]
[:zz-add-zone-and-unite]
[:zz-add-zones-from-highlighting]
[:zz-clone-zones]
[:zz-clone-and-unite-zones]
[:narrow-to-defun]
[:zz-delete-zone]
[:hlt-highlight-regions]
[:hlt-highlight-regions-in-buffers]
[:narrow-to-region]
[:narrow-to-page]
[:zz-select-zone-repeat]
[:zz-set-zones-from-highlighting]
[:zz-unite-zones]
[:zz-set-izones-var]
[:widen]
[:zz-narrow-repeat]
Many of the commands that manipulate zones are bound on keymap '''`narrow-map''''.  They are available on prefix key '''`C-x n'''', along with the narrowing/widening keys `C-x n d', `C-x n n', `C-x n p', and `C-x n w':


* '''`##C-x n ###''''   (`zz-select-zone-by-id-and-text') -- Select zone as region, using completion.
* '''`C-x n a''''   (`zz-add-zone') -- Add the active [[region]] to the current izones set (variable).
* '''`C-x n A''''   (`zz-add-zone-and-unite') -- Add the region to the current set of zones, and then unite (coalesce) them.
* '''`C-x n c''''   (`zz-clone-zones')  -- Clone a zones variable to another one, so the clone has the same zones.
* '''`C-x n C''''   (`zz-clone-and-unite-zones') -- Clone to a variable and then unite its zones.
* '''`C-x n d''''   (`narrow-to-defun') -- Standard, except that it is advised to update the current list of zones with the narrowing.
* '''`C-x n C-d'''' (`zz-delete-zone') -- Delete a zone from a set of zones.
* '''`C-x n f''''   (`zz-set-zones-from-face') -- Set a zone set to areas with a given face or background color
* '''`C-x n h''''   (`hlt-highlight-regions') -- Highlight zones in the current buffer.
* '''`C-x n H''''   (`hlt-highlight-regions-in-buffers') -- Highlight zones in multiple buffers.
* '''`C-x n l''''   (`zz-add-zones-from-highlighting') -- Add highlighted areas as new zones.
* '''`C-x n L''''   (`zz-add-zones-from-highlighting') -- Replace current set of zones with new zones from highlighted areas.
* '''`C-x n n''''   (`narrow-to-region') -- Standard, except that it is advised to update the current list of zones with the narrowing.
* '''`C-x n p''''   (`narrow-to-page') (standard, except that it is advised to update the current list of zones with the narrowing)
* '''`C-x n r''''   (`zz-add-zones-matching-regexp') -- Add [[regexp]] matches as zones.
* '''`C-x n R''''   (`zz-set-zones-matching-regexp') -- Set zone set to [[regexp]] matches.
* '''`C-x n s''''   (`zz-select-zone-repeat') -- Cycle zones as the active [[region]]: '''`##C-x n s s s ...##'''' (negative arg removes zone)
* '''`C-x n u''''   (`zz-unite-zones') -- Unite (coalesce) zones.
* '''`C-x n v''''   (`zz-set-izones-var') -- Make another zones variable current.
* '''`C-x n w''''   (`widen') -- Standard.
* '''`C-x n x''''   (`zz-narrow-repeat') -- Cycle or pop zones as [[Narrowing|narrowings]]: '''`##C-x n x x x ...##''''





[:ZoneSet]
[:ZoneVariable]
The above descriptions speak of the "current list" of zones.  You can have any number of variables whose value is a list of zones, and you can switch among them.  The variables can be buffer-local or global (e.g., with positions recorded from multiple buffers).

Most zone commands let you use a [[prefix argument]] to be prompted for a different zones variable to use from the current one (the value of variable `zz-izones-var').  The use can be just for the current command (e.g., add a zone to the list of zones in a particular variable). Or it can be also for subsequent zone commands, by making the variable you entered the current one (setting `zz-izones-var' to it).



----

If you use library [[Icicles]] then you can use commands `icicle-select-zone', to select a zone as the [[region]], and `icicle-buffer-narrowing', to choose a [[Narrowing|narrowing]] (buffer restriction) and apply it.  They let you cycle zones, like 
`zz-select-zone-repeat' and `zz-narrow-repeat', but you can, in addition, pick zones by name (composed of the zone limits and a zone-text prefix) using completion.  The candidate zones can be from multiple [[buffer]]s.

----

(Library <tt>[[zones.el]]</tt> supersedes library <tt>[[wide-n.el]]</tt>, which is obsolete as of 2015-08-16.)



----
CategoryRegion
MultipleModes
MultipleNarrowings
