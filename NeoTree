[[zh:NeoTree_中文wiki]] [[en:NeoTree]]

An emacs tree plugin like [http://www.vim.org/scripts/script.php?script_id=1658 NERD tree] for Vim.

https://github.com/jaypei/emacs-neotree

== About ==

[img]https://raw.githubusercontent.com/wiki/jaypei/emacs-neotree/imgs/neotree-1.png[/img]


== Installation ==

Clone project:

  $ cd /some/path
  $ git clone https://github.com/jaypei/emacs-neotree.git neotree

Add config to emacs:

  (add-to-list 'load-path "/some/path/neotree")
  (require 'neotree)
  (global-set-key [f8] 'neotree-toggle)

Open (toggle) NeoTree:

  <F8>

== Usage ==

=== Shortcut (Only in Neotree Buffer) ===

* <code>n</code> next line ， <code>p</code> previous line。
* <code>SPC</code> or <code>RET</code> or <code>TAB</code> Open current item if it is a file. Fold/Unfold current item if it is a directory.
* <code>U</code> Go up a directory
* <code>g</code> Refresh
* <code>A</code> Maximize/Minimize the NeoTree Window
* <code>H</code> Toggle display hidden files
* <code>C-c C-n</code> Create a file or create a directory if filename ends with a '/'
* <code>C-c C-d</code> Delete a file or a directory.
* <code>C-c C-r</code> Rename a file or a directory.
* <code>C-c C-c</code> Change the root directory.
* <code>C-c C-p</code> Copy a file or a directory.

=== Commands ===

* <code>neotree-dir</code> show NeoTree window and specify a directory as its root
* <code>neotree-show</code> or <code>neotree</code> show NeoTree window using current directory as its root
* <code>neotree-hide</code> Hide NeoTree window
* <code>neotree-toggle</code> toggle/hide NeoTree window
* <code>neotree-find</code>  show NeoTree window and use the directory of current buffer as its root

=== Commands available in the NeoTree window ===

* <code>neotree-enter</code> Open File / Unfold Directory
* <code>neotree-refresh</code> Refresh
* <code>neotree-stretch-toggle</code> Maximize / Minimize
* <code>neotree-change-root</code> Switch Root Directory
* <code>neotree-hidden-file-toggle</code> Toggle hidden files
* <code>neotree-rename-node</code> Rename a Node
* <code>neotree-delete-node</code> Delete a Node
* <code>neotree-create-node</code> Create a file or a directory (if filename ends with '/')


== Useful tips ==

=== neo-smart-open ===

Every time when the neotree window is opened, let it find current file and jump
to node.

    (setq neo-smart-open t)


=== Work with Projectile ===

When running `projectile-switch-project' (C-c p p), `neotree' will change root automatically.

   (setq projectile-switch-project-action 'neotree-projectile-action)


=== find-file-in-project ===

If you use the <code>find-file-in-project</code> (ffip) library, you can open NeoTree at your directory root by
adding this code to your <code>.emacs.d</code>:


  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (ffip-project-root))
          (file-name (buffer-file-name)))
      (if project-dir
          (progn
            (neotree-dir project-dir)
            (neotree-find file-name))
        (message "Could not find git project root."))))
  
  (define-key map (kbd "C-c C-p") 'neotree-project-dir)

=== Projectile ===

Similar to find-file-in-project, NeoTree can be opened (toggled) at <code>projectile</code> project root as follows:

  (defun neotree-project-dir ()
    "Open NeoTree using the git root."
    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

 (global-set-key [f8] 'neotree-project-dir)


=== Use with evil mode ===

If you use <code>evil-mode</code>, by default some of evil key bindings conflict with <code>neotree-mode</code> keys. For example, you cannot use <code>q</code> to hide NeoTree. To make NeoTree key bindings in effect, you can bind those keys in <code>evil-normal-state-local-map</code> in <code>neotree-mode-hook</code>, as shown in below code:

    (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))

In recent versions of <code>evil-mode</code> you can create key bindings for specific modes using <code>evil-define-key</code>, so another way to override mappings in <code>neotree-mode</code> is as shown below:

    (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
    (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
    (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
    (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
    (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
    (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
    (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
    (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

=== popwin ===

If you use <code>popwin</code>, when NeoTree is open and successively a temporary buffer is opened with popwin, a new window with the NeoTree buffer is displayed side by side next to the first one (#50). This code will help you:

  (when neo-persist-show
    (add-hook 'popwin:before-popup-hook
              (lambda () (setq neo-persist-show nil)))
    (add-hook 'popwin:after-popup-hook
              (lambda () (setq neo-persist-show t))))


== ChangeLog ==

0.2 
* Feature: support <code>neotree-find</code> for locating a node in tree
* Feature: support for renaming
* Feature: Fix NeoTree window width and support Maximize/Minimize
* Fix: File Location Bug
* Refactory: All API starts with 'neotree-' 

0.1.5: (2014-06-05)

* Refactory on code of window and buffer
* Remove \*NeoTree\* from buffer selection list
* Fix: Directory changed to root after toggle

0.1.4: (2014-05-27)

* Fix issue #1 #2
* Add some unit tests
* Remove neotree-util.el

0.1.3: (2014-04-13)

* Support for changing the directory of tree root
* Adding files or directories depends on if the last character is a '/'
* Remove 'Recursive Notification' when deleting an empty directory

0.1.2: (2014-04-08)

* Add File Operations
* Support For Mouse Operations

0.1.1: (2014-04-06)

Basic Functionalities.
