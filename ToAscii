This is how you can turn a string like "Schröder" into "Schroder".
But not to "Schroeder", as German would like you to.
Nor "sœur" to "soeur". Too bad.

{{{
(defun to-ascii (string)
  "Convert STR to just ASCII characters.
All non-ASCII characters are dropped. If the character is a character
that can be split into an ASCII character and a combining diacritic
via normal form D (NFD decomposition), then that ASCII character is
used, turning é into e, for example."
  (let ((normalized (ucs-normalize-NFD-string string))
        (bytes))
    (dotimes (i (length normalized))
      (let ((c (aref normalized i)))
        (when (< c 128)
          (setq bytes (cons c bytes)))))
    (apply 'string (reverse bytes))))
}}}

Weird use-case: Completion using no accents for words with accents.

{{{
(let* ((completions '("épris" "épais"))
       (mapping (mapcar
                 (lambda (s)
                   (cons (propertize (to-ascii s) 'display s) s))
                 completions))
       (key (completing-read "prompt: " mapping)))
  (cdr (assoc key mapping)))
}}}

It looks like "épris" when completing, the result is "épris" when completed, but you type "epris" for completion.
Weird, but it works.

An alternative:

{{{
(defun wordreference-unaccented (str)
  "Return STR with accents removed."
  (mapconcat
    (lambda (c)
      (char-to-string
        (car (get-char-code-property c 'decomposition))))
    str ""))
}}}

----
CategoryCompletion
