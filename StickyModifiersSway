In the Sway Window Manager sticky modifiers can be enabled by loading a custom keyboard configuration file defined using the X keyboard extension (xkb) standard.

Although originally used for X11 a xkb file is Wayland compositor compatible and can be directly loaded in Sway through its configuration file.

= To Long, Didn't Read =

If you are using en-US keyboard, then go to [[keymap_with_sticky_modifiers]] and save the plain text file as a file (Save as...) on your computer disk.  It is a plain text file.  You can inspect its contents.

Note where the file was saved, then let sway load the file with

  swaymsg input "type:keyboard" xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb

Now try it out!  It has the following features:

Sticky Keys
* Ctrl, Shift, Super, Alt are sticky


Sticky Keys Demo
* Launch Emacs
* Press and release Ctrl
* Caps Lock indicator will be turned on, this is telling you that a Sticky Modifier is engaged
* Press and release letter x
* Now Echo Area will show C-x
* Caps Lock indicator will be turned off.

Cancel a Sticky Modifier
* Press and release Ctrl
* Caps Lock indicator will be turned on, this is telling you that a Sticky Modifier is engaged
* Press and release Ctrl
* Caps Lock indicator will be turned off, this is telling you that the sticky modifier is disengaged

Revert to non sticky behavior
* Launch Emacs
* Press and hold Ctrl
* Press and release letter x
* Release Ctrl
* Now Echo Area will show C-x


Easier to Access Modifiers
* Caps Lock is now Left Ctrl
* Apostrophe key is now Right Ctrl
* Menu key is now Right Super

Remapped Keys
* Apostrophe is now located on Tab key
* Tab key is now located on Lower-Right Ctrl
* You can access TAB with C-i

Finally, if you are satisfied with the result, put the line in your sway config

  input "type:keyboard" xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb

= How the xkb file was produced =

Firstly run the bash script below to create two sticky keyboard variant files:

* keymap_with_sticky_modifiers.xkb - a latched sticky modifier setup in which a modifier is activated by a following key press.
* keymap_with_locked_modifiers.xkb - a locking sticky modifier setup in which a modifier will be locked on a double tap and then unlocked with a single tap.

  #!/bin/bash
  DST=$HOME/.config
  # Reset keyboard layout (to your preferred language)
  setxkbmap gb
  # Apply sticky modifier changes and save to a specific file
  xkbcomp $DISPLAY -xkb - | \
  sed 's|SetMods|LatchMods|g' > \
  $DST/keymap_with_sticky_modifiers.xkb
  # Reset keyboard layout (to your preferred language)
  setxkbmap gb
  # Apply locked modifiers changes and save to a specific file
  xkbcomp $DISPLAY -xkb - | \
  sed 's|SetMods|LatchMods|g' | \
  sed 's|,clearLocks);|,clearLocks,latchToLock);|g' > \
  $DST/keymap_with_locked_modifiers.xkb

At this point you can activate Sticky Keys by loading the new xkb keymap in the Sway config as follows:

  input "type:keyboard" {
      xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb
  }

Optionally modify the xkb file directly after generation to use the “Caps Lock” keyboard indicator LED for indicating a sticky modifier is active, like so :

  indicator "Caps Lock" {
      !allowExplicit;
      whichModState= locked;
      modifiers= Control+Mod1+Shift;
  };

This turns on the Caps Lock LED whenever a Control, Alt (Mod1) or Shift key is sticky locked giving a visual hint to any locked keys.  Although useful on a laptop if you are using a full sized keyboard each modifier can be linked to its own indicator LED, for example:

  indicator "Caps Lock" {
      !allowExplicit;
      whichModState= locked;
      modifiers= Control;
  };
  indicator "Num Lock" {
      !allowExplicit;
      whichModState= locked;
      modifiers= Mod1;
  };
  indicator "Scroll Lock" {
      whichModState= locked;
      modifiers= Shift;
  };

As part of this keyboard redefinition it might also be useful to remap the Caps Lock key to the Control modifier.  One way to achieve this in Sway is to modify the config file as follows:

  input type:keyboard {
     xkb_file $HOME/.config/keymap_with_locked_modifiers.xkb
     xkb_options ctrl:nocaps
  }

However, as we are redefining our keyboard layout we can directly modify the xkb configuration file in the following manner:

replace:

  key <CAPS> {         [       Caps_Lock ] };

with

  key <CAPS> {         [       Control_L ] };

replace:

  modifier_map Lock { <CAPS> };

with

  modifier_map Control { <CAPS> };

For bonus points, and to ensure that the right Alt modifier functions like a regular Alt thereby distributing the keys more evenly between the left and right hands, perform the following steps:

add:

  modifier_map Mod1 { <RALT> };

set the definition of key <RALT> to:

  key <RALT> {         [           Alt_L,          Meta_L ] };
