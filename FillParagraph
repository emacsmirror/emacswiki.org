<b>In text-mode</b>, lines end when you tell Emacs to end them.  RET is bound to <code>newline</code>.  This will insert a line break.  If you don't hit RET, your current line will grow longer and longer.  As you reach the right margin of your display, the line is wrapped for you.

== Line Wrapping ==

Emacs displays a "\" character at the end of the line and your typing continues on the next line.  Emacs doesn't insert any linebreaks for you unless you say so.  Therefore many people think this looks "ugly" since it doesn't take word boundaries into account.  Here is an example of how a long line might look on a small display:

    In text-mode, lines end when you te\|
    ll Emacs to end them.  RET is bound\|
    to newline.  This will insert a lin\|
    e break.                            |

== Paragraph Filling / Word Wrapping ==

Instead of hitting RET when your typing approaches the right margin, you can type <code>M-q</code> or <code>M-x fill-paragraph</code> to fill the current paragraph.  This will take the paragraph and fill all the words such that line breaks are removed from short lines and new line breaks are inserted before words that cross the right margin.

The right margin is determined by the variable <code>fill-column</code>.  You can set it using <code>C-x f</code> or <code>M-x set-fill-column</code> using an explicit argument.  Use C-u followed by a number to specify a column.  Just C-u as argument means to use the current column. The default value for fill-column is 70. This can be set to 80 in the InitFile with the command

  (setq-default fill-column 80)

In the following example, I have set the fill-column to 35 by typing <code>C-u 35 C-x f</code> and then I used <code>M-q</code> to refill the paragraph.   (See AutoFillMode if you want to reduce your <code>M-q</code> typing.)

    In text-mode, lines end when you    |
    tell Emacs to end them.  RET is     |
    bound to newline.  This will insert |
    a line break.                       |

You can also block-fill the text by using a prefix for the paragraph filling command.
Using <code>C-u M-q</code> to fill the same text, I get this:

    In  text-mode, lines  end  when you |
    tell  Emacs to  end  them.  RET  is |
    bound to newline.  This will insert |
    a line break.                       |

The same block-fill is achieved by <code>M-1 M-q</code> which is faster to type.

== Not Breaking ==

The `fill-nobreak-predicate' hook lets you avoid line breaks at certain places.  For example if you're *French*, you might be used to typing a space in front of colons, question marks, exclamation marks, etc.  [http://blog.empyree.org/?2004/01/31/181-internationalisation-punctuation-support]  This might lead to the following problem:

   Where do we write the question marks |
   ? We use a space in front of them.   |

To avoid this, add `fill-french-nobreak-p' to
`fill-nobreak-predicate'.

Emacs comes with a `fill-single-word-nobreak-p' to not dangle the first or last word of a sentence, and HtmlMode/SgmlMode sets up `sgml-fill-nobreak' to keep a tag and first attribute together.  For more nobreaks see

* NobreakFade -- a few miscellaneous nobreaks
* PerlPodGt -- POD <code>C<<</code>, <code>S<></code> and <code>C<!></code>
* [http://user42.tuxfamily.org/texinfo-nobreak/index.html texinfo-nobreak.el] -- workarounds for <code>makeinfo</code>

== Paragraph Boundaries ==

By default, text-mode assumes that empty lines separate paragraphs.  The boundaries of paragraphs are determined by two variables.  You might want to change these two variables if you are writing a new major mode for a programming language, or if you are unhappy with the defaults.  Here is an example:  If you write a bulleted list, you need to separate items by an empty line if you want to fill them using <code>M-q</code>:

    * One item
    
    * Another item
    
    * The last item

If you want to write this without empty lines, filling will fuse the items:

    * One item
    * Another item
    * The last item

turns into

    * One item Another item The last item

In order to prevent this, we need to tell Emacs that the bullet indicates the start of a new paragraph.  Here is how:

    ;; The original value is "\f\\|[      ]*$", so we add the bullets (-), (+), and (*).
    ;; There is no need for "^" as the regexp is matched at the beginning of line.
    (setq paragraph-start "\f\\|[ \t]*$\\|[ \t]*[-+*] ")

To cover other cases, such as numbered lists, it may be helpful to copy from the settings in MarkdownMode (or simply use it for plain text).

In older Emacs (prior to 20.7), it may be necessary to use something closer to this:

    (setq paragraph-start "\f\\|[ \t]*$\\|[ \t]*[-+*] +.+$"
          paragraph-separate "$")

== Problems ==
=== Setting the fill column seems not to work ===
If you see that   C-u 100 C-x f M-q   and   C-u 20 C-x f M-q   and others are doing exactly the same, for instance breaking the lines at column 70, then check the major mode you are in. If possible, change to text-mode (M-x text-mode) and try again there. Some modes (ex: lisp-interaction-mode, the one used in the *scratch* buffer) seem to overwrite the filling rules.

Note: lisp-interaction-mode will respect the fill-column setting if you customize the variable emacs-lisp-docstring-fill-column to t

----
CategoryFilling CategoryCode
