The `browse-url' package included in Emacs, originally written by DenisHowe, allows you to open a URL in a browser, normally reusing an existing browser process instead of creating a new one.

The URL, which defaults to the URL around point, is read from the minibuffer.  `browse-url' can also load URLs associated with the current buffer, from dired, etc.

==See also==
* GotoAddress -- highlight URLs and make them clickable
* BrowseAproposURL -- launch browser searches

==Selecting the browser to use==
This is controlled by the variable `browse-url-browser-function'.

You can customize it by entering <kbd>M-x customize-option browse-url-browser-function</kbd> and following the prompts.  If your browser is not among those listed, choose the entry "Specified by `Browse Url Generic Program'" and customize the option `browse-url-generic-program'.  Using a generic browser offers no remote control -- for every URL you click a new process will be started.

For help on getting a browser that doesn't die when emacs is exited, see PersistentProcesses.

== Browsing the URL of the current buffer ==
The command `browse-url-of-buffer' opens the URL associated with the file in the current buffer.

To control how file names are mapped to URLs, update the variable
`browse-url-filename-alist', for example:

    (add-to-list 'browse-url-filename-alist
                 '("/var/www/cgi/files/" . "http://my.website.com/cgi?"))

== Support for various browsers ==
===Back-porting support to earlier Emacs===
If you are using a version of Emacs without support for one of the browsers supported in recent versions, you can backport support from the current ##browse-url.el##.
=== Galeon ===
There's `browse-url-galeon'.
Note that the "new galeon window" functionality is broken in emacs 21.2.  Is fixed in the current emacs CVS 21.3.50 though. 

JuhapekkaTolvanen : This worked fine, when I still used Galeon:

    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "galeon"
          browse-url-generic-args '("-n"))

=== Seamonkey ===

The code above for Mozilla works with Seamonkey too...

    (defun my-browse-url-seamonkey-new-tab (url &optional new-window)
      ;; new-window ignored                                                         
      "Open URL in a new tab in Seamonkey."
      (interactive (browse-url-interactive-arg "URL: "))
      (unless
          (string= ""
                   (shell-command-to-string
                    (concat "seamonkey -remote 'openURL(" url ",new-tab)'")))
        (message "Starting Seamonkey...")
        (start-process (concat "seamonkey " url) nil "seamonkey" url)
        (message "Starting Seamonkey...done")))

    (setq browse-url-browser-function 'my-browse-url-seamonkey-new-tab)

=== Opera ===
From opera -h:

    Usage: opera [options] url
    -newwindow                     open url in new window
    -newpage                       open url in new page (tab)
    -backgroundpage                open url in background page (tab)

The netscapesque -remote openURL options are also supported.

=== Midori ===

Setting browse-url-generic-program to Midori just works fine : 

    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "midori")

=== Links gui mode ===
Also Known As  links -g
set links in browse-url-generic-program
set -g in browse-url-generic-args

=== Xwidget Webkit ===
If you try the Emacs Xwidget branch you can do:

  (setq browse-url-browser-function 'xwidget-webkit-browse-url)

Then a webkit browser will show up inside an Emacs buffer.

=== Conkeror ===
Add the following to .emacs:

   (setq browse-url-browser-function 'browse-url-generic
         browse-url-generic-program "/path/to/conkeror")

Add the following to .conkerorrc:

    url_remoting_fn = load_url_in_new_buffer;


=== IceCat ===
Add the following to .emacs:

    (setq browse-url-browser-function 'browse-url-generic
          browse-url-generic-program "icecat")

=== Termux (Android) ===
If you're running Emacs on Termux you can use `am' to pass URL to browser. `am' can be installed by running `apt install termux-am'. You can then add this to your init.el:

  (defun open-url-am (url &rest ignore)
    (interactive "sURL: ")
    (shell-command (concat "am start -a android.intent.action.VIEW -d '" url "'")
      (setq truncate-lines t))
  (setq browse-url-browser-function 'open-url-am)

If you haven't set a default browser, the system service will prompted you with which browser you want to open the url with.

Note: You need to include protocol to open URL with `am' (example: "https://google.com" will work, "google.com" won't and will return error)

=== Microsoft Edge (Windows 10) ===
Add the following to .emacs

    (defun browse-url-edge (url &optional new-window)
      (shell-command
        (concat "start microsoft-edge:" " " url)))

and set the browser function

    (setq browse-url-browser-function 'browse-url-edge)

[new]
I don't know why but to be able to use # anchors in URLs I had to define:

    (defun browse-url-edge (url &optional new-window)
      (shell-command
        (concat "start msedge" " " url)))

-- DieterWilhelm, 2021-08-30

=== Lagrange and Gemini URLs ===
To support Gemini URLs and open them with Lagrange, the following snippet can be used. It first creates the <code>lagrange-browse-url-lagrange</code> function. Then, it cofigures the handlers with the proper regexp to identify a gopher/gemini URL. The regexp were obtained from the elpher package.

If you installed the elpher package, it configures the <code>browse-url-default-handlers</code> properly by default. So, you would not require to change anything to use elpher by default. However, if you want to use Lagrange instead, use this snippet.

    (defcustom lagrange-program "lagrange"
      "The program path to Lagrange.")
    (defcustom lagrange-arguments nil
      "Extra arguments for Lagrange.")

    (defun lagrange-browse-url-lagrange (url &rest _)
      "Open Lagrange to browse the given URL."
      (interactive (browse-url-interactive-arg "URL: "))
      (setq url (browse-url-encode-url url))
      (let* ((process-environment (browse-url-process-environment)))
        (apply #'start-process
               (concat "lagrange " url) nil
               lagrange-program
               (append
                lagrange-arguments            
                (list url)))))

    (with-eval-after-load 'browse-url
      (add-to-list 'browse-url-handlers 
                   (cons "^\\(gopher\\|finger\\|gemini\\)://" 
                     #'lagrange-browse-url-lagrange)))

--  ChristianGimenez, 2022-04-10

== Feeling Lucky? ==

Let Google figure out the most appropriate web site for the stuff in your region:

{{{
(defun browse-lucky (start end)
  (interactive "r")
  (let ((q (buffer-substring-no-properties start end)))
    (browse-url (concat "http://www.google.com/search?btnI&q="
			(url-hexify-string q)))))
}}}

== Discussion ==

=== "Bug" in browse-url-default-windows-browser ===

[new]
The function <code>browse-url-default-windows-browser</code> strips anchors from URLs to local files. For instance, if typing

    M-x browse-url-default-windows-browser file:///C:/index.html#test

where <code>C:/index.html</code> is an existing file, <code>#test</code> will be removed from the final URL.

*Update:* Further investigation reveals that the problem is related to <code>w32-shell-execute</code>. Executing

    (w32-shell-execute "open" "file:///C:/index.html#test")

opens <code>file:///C:/index.html</code>, without the anchor. <code>w32-shell-execute</code> is defined in C source code ... does this mean the problem is intractable?

[new]
Your should report your problem to the Emacs user list [[help-gnu-emacs]].

My guess is that the URL needs to quoted before opened, but I haven't checked it anywhere.

{{{
--- browse-url.el	02 Mar 2009 17:54:39 -0500	1.77
+++ browse-url.el	02 Mar 2009 17:54:46 -0500	
@@ -831,7 +831,7 @@
       (if dos-windows-version
 	  (shell-command (concat "start " (shell-quote-argument url)))
 	(error "Browsing URLs is not supported on this system"))
-    (w32-shell-execute "open" url)))
+    (w32-shell-execute "open"(shell-quote-argument url))))
 
 (defun browse-url-default-macosx-browser (url &optional new-window)
   (interactive (browse-url-interactive-arg "URL: "))
}}}

Note that you should use the command `M-x browse-url', but customize `browse-url-browser-function' as `browse-url-default-windows-browser'. See the [[Manual:Browse-URL]] section of the Emacs manual. -- AaronHawley

[new]
The problem is not one of quoting, since <code>(shell-quote-argument "file:///C:/index.html#test")</code> returns <code>"\"file:///C:/index.html#test\""</code>. Rather, it seems to be the case that <code>file:///C:/index.html#test</code> is a /nonstandard/ URI; [http://tools.ietf.org/html/rfc1630 RFC 1630] and [http://tools.ietf.org/html/rfc1738 RFC 1738] don't specify a <code>#target</code> (i.e., an anchor) for file URIs. (External URIs work!) Most browsers will happily parse such URIs anyway, but with Window's <code>ShellExecute</code> the nonstandard URI is converted to a standard one before reaching the browser, and so the <code>#target</code> is stripped off.

In other words, however useful <code>#targets</code> in file URIs are, Windows is "right" in removing them. :(

**The solution:** call the browser /directly/ instead, e.g., use <code>browse-url-firefox</code> instead of <code>browse-url-default-windows-browser</code>. Add

    (setq browse-url-browser-function 'browse-url-firefox
          browse-url-new-window-flag t
          browse-url-firefox-new-window-is-tab t)

to <code>.emacs</code> and use the function <code>browse-url</code> (thanks, AaronHawley).

=== Defining a new URL type? ===

I'd like to define a handler for a new URL type, but the info pages for URL mode is, um, completely missing.  Does anybody have any pointers?

Thanks, JamesFelixBlack

=== More control over opening in emacs vs. opening in external ===

I want C-u to always open in emacs (e.g. emacs-w3m) and C-u C-u to always open in external (e.g. Safari).

Is there a way?

[new]
-> Have a look here: http://www.emacswiki.org/cgi-bin/wiki/JorgenSchaefersEmacsConfig
I have this in my .emacs:
{{{
(require 'w3m-load)
(require 'w3m)
 (setq browse-url-browser-function 'browse-url-generic
       browse-url-generic-program "/usr/bin/conkeror")

(defun choose-browser (url &rest args)
  (interactive "sURL: ")
  (if (y-or-n-p "Use external browser? ")
      (browse-url-generic url)
    (w3m-browse-url url)))

(setq browse-url-browser-function 'choose-browser)
(global-set-key "\C-xm" 'browse-url-at-point)
}}}
hth Memnon
[new]

Alternatively, to use C-u to give a choice between opening in an internal or an external browser, with that choice persisting until reset:

{{{
(setq browse-url-browser-function 'eww-browse-url)

(defun choose-browser (url &rest args)
  "Ask the user to choose between an internal and external web browser, the choice then persisting."
  (interactive "sURL: ")
  (if (y-or-n-p "Use external browser? ")
      (progn
        (setq browse-url-browser-function 'browse-url-firefox)
        (browse-url-firefox url args))
    (progn
      (setq browse-url-browser-function 'eww-browse-url)
      (eww-browse-url url))))

(defun mg/browse-url (args)
  "Call choose-browser function if the universal argument is used."
  (interactive "P")
  (if (equal current-prefix-arg '(4))
      (setq browse-url-browser-function 'choose-browser)))

(advice-add 'browse-url :before #'mg/browse-url)
}}}

===More integrated way of invoking the default browser under Mac OSX in Emacs 23===

The simplest, most integrated way is to use the system utility `open', which uses the system's default browser:

{{{
(setq browse-url-browser-function (quote browse-url-generic))
(setq browse-url-generic-program "open")
}}}

The default `open' loads the URL according to default browser behavior.  In instances where you want to force a new browser window, you can execute applescript from elisp (only in Emacs >23):

{{{
(defun browse-url-default-macosx-browser (url &optional new-window)
  (interactive (browse-url-interactive-arg "URL: "))
  (if (and new-window (>= emacs-major-version 23))
      (ns-do-applescript
       (format (concat "tell application \"Safari\" to make document with properties {URL:\"%s\"}\n"
		       "tell application \"Safari\" to activate") url))
    (start-process (concat "open " url) nil "open" url)))
}}}

On the other hand, if you want the browser to reuse an existing tab if it has one already showing the URL, the applescript is somewhat more complicated.  [http://qwan.org/2011/09/01/reloading-a-page-in-chrome-from-aquamacs/ Instructions are here.]

=== Is there a package which makes URLs clickable? ===

I'm looking for a minor mode or similar which I can turn on in any buffer and it makes all URLs in the buffer clickable and of course keeps the URLs updated when the buffer text is edited. Is there such a package?

[new]
Sounds like you want goto-address-mode (see GotoAddress). Other alternatives: [[Hyperbole]] does this automatically and much more, nXhtml has mlinks.el (HTML-style links only), and org-mode has support for URL links but that's a major mode. There's also BrowseUrl. The commentary  suggests adding the following to your .emacs.

{{{
(global-set-key [S-mouse-2] 'browse-url-at-mouse)
}}}

=== Choose browser when using Org-mode's org-open-at-point (C-c C-o) ===

If you want to be able to easily choose between different browsers
(with w3m as the default) you can advise `org-open-at-point' with the
following code (note, it uses choose-browser from above):
[new]
{{{
(defadvice org-open-at-point (around org-open-at-point-choose-browser activate)
  (let ((browse-url-browser-function
         (cond ((equal (ad-get-arg 0) '(4))
                'browse-url-generic)
               ((equal (ad-get-arg 0) '(16))
                'choose-browser)
               (t
                (lambda (url &optional new)
                  (w3m-browse-url url t)))
               )))
    ad-do-it))
}}}
[new]

Defaults to w3m: C-c C-o
Defaults to external browser: C-u C-c C-o
Choose w3m or external browser: C-u C-u C-c C-o

-- AaronCulich


=== Private Browsing ===

Ask whether URL should open in a new window in [https://support.mozilla.org/en-US/kb/private-browsing-browse-web-without-saving-info private browsing] mode (with Firefox). Unconditionally open some URLs in private browsing mode:

{{{
(defun my-browse-url-maybe-privately (url &optional new-window)
  "Ask whether URL should be browsed in a private browsing window."
  (interactive "sURL: ")
  (if (y-or-n-p "Private Browsing? ")
      (my-browse-url-firefox-privately url)
    (browse-url-default-browser url new-window)))

(defun my-browse-url-firefox-privately (url &optional new-window)
  "Make firefox open URL in private-browsing window."
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((process-environment (browse-url-process-environment)))
    (apply 'start-process
           (concat "firefox " url)
           nil
           browse-url-firefox-program
           (list "-private-window" url))))

(setq browse-url-browser-function
      '(("^https?://t\\.co" . my-browse-url-firefox-privately)
        ("^https?://instagram\\.com" . my-browse-url-firefox-privately)
        ("." . my-browse-url-maybe-privately)))
}}}

----
CategoryDotEmacs CategoryHypermedia
