A built-in MinorMode version of OutlineMode.

See also [[Manual:Outline Minor Mode]] in the manual.

== Summary ==
<kbd>M-x outline-minor-mode</kbd> enables Outline minor mode, with OutlineMode commands bound to keys in `outline-minor-mode-map', which is bound to the prefix key <kbd>C-c @</kbd> by default.  The prefix key to use can be customized with `outline-minor-mode-prefix'.  See [[Keys]], searching for "outline" to view the key bindings in use, etc.

==Cycling==
Per [[Manual:Outline Minor Mode|the manual]] setting `outline-minor-mode-cycle' makes the TAB and S-TAB keys cycle visibility on the outline heading lines for the current-section and entire buffer respectively.
==Customizing Heading Definition==
See OutlineMode

== Using less awkward key-bindings  ==
The default `C-c @' bindings are awkward to use.  To address this one can follow one the approaches below

===Add an additional prefix key===
    (add-hook 'outline-minor-mode-hook
              (lambda () (local-set-key "\C-c\C-c"
                                        outline-mode-prefix-map)))))
===Create a new keymap manually===
For example:
{{{
 ; Outline-minor-mode key map
 (define-prefix-command 'cm-map nil "Outline-")
 ; HIDE
 (define-key cm-map "q" 'hide-sublevels)    ; Hide everything but the top-level headings
 (define-key cm-map "t" 'hide-body)         ; Hide everything but headings (all body lines)
 (define-key cm-map "o" 'hide-other)        ; Hide other branches
 (define-key cm-map "c" 'hide-entry)        ; Hide this entry's body
 (define-key cm-map "l" 'hide-leaves)       ; Hide body lines in this entry and sub-entries
 (define-key cm-map "d" 'hide-subtree)      ; Hide everything in this entry and sub-entries
 ; SHOW
 (define-key cm-map "a" 'show-all)          ; Show (expand) everything
 (define-key cm-map "e" 'show-entry)        ; Show this heading's body
 (define-key cm-map "i" 'show-children)     ; Show this heading's immediate child sub-headings
 (define-key cm-map "k" 'show-branches)     ; Show all sub-headings under this heading
 (define-key cm-map "s" 'show-subtree)      ; Show (expand) everything in this heading & below
 ; MOVE
 (define-key cm-map "u" 'outline-up-heading)                ; Up
 (define-key cm-map "n" 'outline-next-visible-heading)      ; Next
 (define-key cm-map "p" 'outline-previous-visible-heading)  ; Previous
 (define-key cm-map "f" 'outline-forward-same-level)        ; Forward - same level
 (define-key cm-map "b" 'outline-backward-same-level)       ; Backward - same level
 (global-set-key "\M-o" cm-map)
}}}
===Create a new keymap programmatically===
Instead of rebinding keys one by one define:
{{{
(defun my-simplify-fold-keymap (mode)
  (let ((map (make-sparse-keymap)))
     (map-keymap (lambda (ev def)
                   (define-key map (string (event-basic-type ev)) def))
                 (lookup-key
                  (alist-get mode minor-mode-map-alist)
                  (kbd "C-c @")))
     map))
}}}

Then just bind the result of the above function called with 'hs-minor-mode and/or 'outline-minor-mode.

=== Explorer like Key-Bindings ===

{{{
(defun body-p ()
  (save-excursion
    (outline-back-to-heading)
    (outline-end-of-heading)
    (and (not (eobp))
	 (progn (forward-char 1)
		(not (outline-on-heading-p))))))

(defun body-visible-p ()
  (save-excursion
    (outline-back-to-heading)
    (outline-end-of-heading)
    (outline-visible)))

(defun subheadings-p ()
  (save-excursion
    (outline-back-to-heading)
    (let ((level (funcall outline-level)))
      (outline-next-heading)
      (and (not (eobp))
	   (< level (funcall outline-level))))))

(defun subheadings-visible-p ()
  (interactive)
  (save-excursion
    (outline-next-heading)
    (outline-visible)))

(defun outline-do-close ()
  (interactive)
  (if (outline-on-heading-p)
      (cond ((and (body-p) (body-visible-p))
	     (hide-entry))
	    ((and (subheadings-p)
		  (subheadings-visible-p))
	     (hide-subtree))
	    (t (outline-previous-visible-heading 1)))
    (outline-back-to-heading t)))

(defun outline-do-open ()
  (interactive)
  (if (outline-on-heading-p)
      (cond ((and (subheadings-p)
		  (not (subheadings-visible-p)))
	     (show-children))
	    ((and (body-p)
		  (not (body-visible-p)))
	     (show-entry))
	    (t (show-entry)))
    (outline-next-visible-heading 1)))

(define-key outline-mode-map '[left] 'outline-do-close)
(define-key outline-mode-map '[right] 'outline-do-open)
(define-key outline-minor-mode-map '[left] 'outline-do-close)
(define-key outline-minor-mode-map '[right] 'outline-do-open)
}}}
--
ovr

== Avoid hiding comments at beginning of lines ==

For _years_ i wanted to modify outline-minor-mode, so that comments starting at the beginning of line  were left visible.  Now I add the condition that they don't get marked as headers. 

Here's the code.  Note that these definitions override built-in ones:  

{{{
(defun outline-flag-region-make-overlay (from to) ;mmc
  (let ((o (make-overlay from to)))
    (overlay-put o 'invisible 'outline)
    (overlay-put o 'isearch-open-invisible
                 'outline-isearch-open-invisible)
    o))

(defun outline-flag-region (from to flag) ;mmc
  "Hides or shows lines from FROM to TO, according to FLAG.
If FLAG is nil then text is shown, while if FLAG is t the text is hidden."
  (save-excursion
    (goto-char from)
    (end-of-line)
    (outline-discard-overlays (point) to 'outline)
    (if flag
        ;;
        (let ((beginning (point))
              (regexp (concat "^" (regexp-quote comment-start)))
              )
          (while (re-search-forward regexp to 't)
            (goto-char (match-beginning 0))
            (if (> (- (point) beginning) 2)
                (outline-flag-region-make-overlay beginning (point)))
            ;(goto-char
            (end-of-line)
            (setq beginning (point)))
          (outline-flag-region-make-overlay beginning to)))
    (run-hooks 'outline-view-change-hook)))
}}}
--
mmc
==Extension packages==
OutlineMagic and OutshineMode (newer, based on OutlineMagic) extend OutlineMode and OutlineMinorMode with extra commands and more convenient key bindings. 


----
CategoryModes
CategoryOutline
