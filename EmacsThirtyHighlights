Emacs 30 was released on 2025-02-23.  You can build it locally, test it and if you find issues report these as EmacsBugs.

This page aims to motivate testing Emacs, by highlighting the upcoming features, instead of having a low-effort blog post circulate around the internet.  As such, please contribute comments (see HowToEdit if you are not familiar with Emacs Wiki).  Just remember: Add context, motivate and attribute!

Consult the NEWS file on the "emacs-30" branch for an authoritative and exhaustive listing of changes: https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/NEWS?h=emacs-30.

-----

The following is a list of highlights from the Emacs 30 release.

== Android Support ==

Just as Emacs runs on different operating systems (GnuLinux, [[BSD]], [[DOS]], ...), it now runs natively and graphically on Android systems as a standalone application.  The advantage is that you are not restricted by a terminal emulator, but also can bind commands to touch-screen-specific events like swiping or pinching. 

See EmacsOnAndroid and https://lwn.net/Articles/936576/. Developed by PoLu, see https://lists.gnu.org/archive/html/emacs-devel/2022-12/msg01358.html.

== New JSON Parser ==

A new, custom JSON parser has replaced the Jansson-based parser added in Emacs 27.  The advantage is that it doesn't store objects in an intermediate format, thereby reducing memory usage and allocation costs.  Along with a new serializer, this deprecates the Jansson parser while making it accessible to more users.

JSON speedup is interesting to all users of LSP implementations such as [[Eglot]], as this accelerates the speed at which Emacs can respond to server messages.

The parser was contributed by GézaHerman, see https://lists.gnu.org/archive/html/emacs-devel/2024-03/msg00539.html.  The encoder was written by MattiasEngdegård, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=70007.

== New Completion Preview mode ==

This minor mode displays completion suggestions as you type, using an inline preview.  It's well integrated with `completion-at-point' and uses the same completion backends.
You can enable Completion Preview mode for all supported buffers with `global-completion-preview-mode'.

This feature was contributed by EshelYaron, see https://eshelyaron.com/posts/2023-11-17-completion-preview-in-emacs.html, and check out the Commentary section of `completion-preview.el' for up-to-date documentation.

== New `:vc' keyword for UsePackage ==

It is possible to specify declarative requests to install packages using PackageVc and UsePackage.  If you maintain/regularly contribute to a package from ELPA, you can install it from source by writing

{{{
(use-package foo :vc t)
}}}

This feature was contributed by TonyZorman, see https://tony-zorman.com/posts/use-package-vc.html.  Note that the related `vc-use-pacakge' package (https://github.com/slotThe/vc-use-package) is not compatible with this feature.

*Reminder:* PackageVc is not a general purpose package manager.  It exists to make contributing to packages easier, as with commands like `package-vc-prepare-patch'.  Due to the inherent difficulties of upgrading packages from version control, it is not recommended for regular use.  Stable tarball packages from GnuElpa and NonGnuElpa are more reliable and stable, and use less disk space.

== New TreeSitter based modes ==

Building on the addition of TreeSitter in Emacs 29, new major modes that use TreeSitter parsers have been added:

* `elixir-ts-mode' (by WilhelmHKirschbaum)
* `heex-ts-mode' (by WilhelmHKirschbaum)
* `html-ts-mode' (by TheodorThornhill)
* `lua-ts-mode' (by JohnMuhl)
* `php-ts-mode' (by VincenzoPupillo)

Using `treesit-install-language-grammar', you can install the necessary grammars for these major modes to work. 

== New Packages ==

=== Support for EditorConfig ===

EditorConfig is a popular format for specifying general properties about how an Editor should format a file (indentation width, indentation style, encoding, ...).  See https://editorconfig.org/ for more details.

While an Emacs package has existed on NonGnuElpa, it has now been added to the core as well.  Note that is hasn't been enabled by default (that might happen in the future!).

The `editorconfig-mode' was initially written by Google, and was cleaned up before added by StefanMonnier.

=== Inclusion of WhichKey ===

The WhichKey minor mode displays a list of partial key-chords after a short delay.  It is comparable to pressing <kbd>C-h</kbd> mid-chord, but without having to interrupt it.  Novices appreciate the minor mode to discover new commands.

The `which-key' package was written by JustinBurkett, and the inclusion into Emacs was guided by JeremyBryant.

=== Addition of a Compat Shim ===

This is only of interest to Emacs Package developers:  The Compat package implements definitions of functions compatible for newer versions of Emacs.  Other packages may depend on Compat to make use of newer definitions, making it easier to support older versions of Emacs.

With Emacs 30, a more or less empty file has been added that will prevent Compat from being installed from ELPA if unnecessary.  This also allows core packages such as `python' to use Compat in-core, and fetch it when installed from ELPA.

The shim was contributed by DanielMendler and PhilipKaludercic.

== Useful New Commands ==

=== `diff-apply-buffer' ===

When viewing a diff, it is already easy to apply a singular hunk with <kbd>C-c C-a</kbd>.  This new command applies all hunks at once.  It is useful when combined with [[Eglot]]s `eglot-confirm-server-edits' option, that displays server edits as diffs instead of editing files on the disk.

This command was implemented by JuriLinkov, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=66113.

=== `customize-toggle-option' ===

This command is a convenient shorthand to toggle the value of boolean user options.  You can use it to toggle minor modes, which are usually all also boolean user options.

This command was implemented by PhilipKaludercic, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=69079.

=== `toggle-window-dedicated' ===

A [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Dedicated-Windows.html dedicated window]] will always display a fixed buffer, and won't be replaced by some other buffer.  Up until now this property had to be set programmatically using Elisp.  This has changed with a new command that toggles the property for the current window.  It has been bound to <kbd>C-x w d</kbd> by default.

This command was contributed by SpencerBaugh, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=64619

=== `prog-fill-reindent-defun' ===

This command merges `fill-paragraph' and `indent-region' for programming modes.  Bound to <kbd>M-q</kbd> it will reindent the defun at point (or any other top-level language construct), expect if the point is in a string.  In that case it will refill (see CategoryFilling) the contents of the string, breaking lines where necessary.  If possible, the command will make use of information make avaliable by TreeSitter.

This command was contributed by TheodorThornhill, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=59664

=== `package-isolate' ===

Instead of using [tt]emacs -Q[/tt] and loading packages by hand, this command starts a new Emacs instance that will only load a specified list of packages.

This feature was implemented by PhilipKaludercic.

=== `list-keyboard-macros' ===

A command to work with keyboard macros similar to `list-buffers'.

== Interesting User Options ==

*General tip:* Run <kbd>M-x customize-changed</kbd> and select the last version you have been using to get a list of all new user options, along with documentation and possible values.

=== New user option `grep-use-headings' ===

When running a command like rgrep, the default behaviour is to list each match with the file name and line number at the beginning of each line (think of the [tt]-H[/tt] option for GnuGrep).  When this new option is enabled, the [tt]*Grep*[/tt] will be structured using headers that correspond to file names, thereby shortening each line.  This is useful when combined with the `rgrep' command.

This option was contributed by AugustoStoffel, see https://debbugs.gnu.org/cgi/bugreport.cgi?bug=59888

=== New user option `imenu-flatten' ===

By default, invoking [[Imenu]] will hide some definitions underneath submenus ("Functions", "Classes", ...).  By enabling this new option, these are all flattened into a single menu, which is more convenient for people who use [[Fido]] or [[Vertico]] to select completions.

Implemented by JuriLinkov in https://debbugs.gnu.org/cgi/bugreport.cgi?bug=70846

=== New user option `flymake-show-diagnostics-at-end-of-line' ===

Instead of using `display-local-help' to print the message of a FlyMake warning/error in the echo area (or using a command like `flymake-show-buffer-diagnostics'), this option makes it so that Flymake adds overlays at the ends of the affected lines.  This makes it easier to see what is wrong on a glance, and copies the style of many contemporary editors, but comes at the cost of not being able to select or interact with the message, in a way that one would expect from Emacs.

Implemented by JoãoTávora.

=== New user option `edmacro-reverse-macro-lines'. ===

This makes Edmacro Mode show the keys in reverse order. This is convenient with `kmacro-edit-lossage' and the new command `edmacro-set-macro-to-region-lines'.
