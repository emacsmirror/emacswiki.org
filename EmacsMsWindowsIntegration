This page is about different ways to integrate Emacs into MS Windows:

== Run Emacs from a `cmd' Window ==

Put the Emacs `bin' folder in the Windows ##PATH## environment variable (right-click Computer, Properties, Advanced, Environment Variables).  This also simplifies other methods mentioned on this page (no explicit paths needed then).

== Create a shortcut ==

Use this code for a desktop/task-bar shortcut. Right-click in a file folder, select New -> Shortcut, and enter: 

{{{
c:\path\to\emacs\bin\emacsclientw.exe -c -n -a c:\path\to\emacs\bin\runemacs.exe
}}}

This shortcut will connect to [WThirtyTwoServerMode Emacs daemon] if it is running, otherwise opens a new frame.

  -c tells emacs to create a new frame instead of trying to use an existing frame.
  -n means no wait - don't wait for the server to return
  -a EDITOR specifies to the emacsclientw.exe which editor to run if emacs.exe is not running. An empty string starts a new server if needed


This may not work correctly on Windows 7. See MsWindowsSevenProblems

Note: If the path contains a blank (whitespace) things get a little bit more complicated and one should use quotes. Also, it works omitting the alternative editor completely. In this case the emacsclient tries to launch a new emacs server anyway:
{{{
"c:\path\to\emacs\bin\emacsclientw.exe" -c -n -a ""
}}}






== Pin Shortcut to Taskbar (Windows 10) ==
On Windows 10 and later pinning shortcut created by installer to Windows taskbar will pin runemacs.exe, when clicked such pin will spawn other
process (emacs.exe) and create another un-pinned same-looking icon on taskbar. To avoid this:

1. Remove (unpin) any Emacs pinned icons from taskbar

2. Start Emacs from Start menu (or run runemacs.exe directly)

3. Pin newly created taskbar icon, right-click it and in context menu right-click "emacs" and select "Properties"

4. In shown dialog in Target field replace emacs.exe with runemacs.exe and click Apply


[new:DrewAdams:2021-10-31 23:31 UTC]
Sorry, but I don't understand this.  Is the problem you cite only for a *"shortcut created by installer"*?  If so, what does that mean (what installer; what's special about such a shortcut)?

I just create a shortcut manually to ##Z:\Emacs-26.3\bin\runemacs.exe --debug-init## (or whatever), and then pin that shortcut to the Task Bar.  I have Windows 10, and I have no problem if I do that. -- DrewAdams


[new:blami:2021-11-02 01:47 JST]
Do you pin the shortcut (1) by going to Start menu while Emacs not running and right clicking shortcut and selecting "Pin to taskbar", or (2) directly by running Emacs from that shortcut (no matter if yours or installer but pointing to runemacs.exe) right-clicking icon that it created on taskbar and selecting "Pin to taskbar"?. In case (1) when you click such taskbar pin it will not activate (underline) as Emacs starts but instead create another Emacs icon for emacs.exe on taskbar (problem). In case (2) emacs.exe will be pinned and clicking such pin will activate pin and not create another icon (ok) but will also show command line window (problem). These can be avoided by steps described above on both Windows 10 and 11. Sorry if it's not clear, English is not my first language.

Did quick search on the Internet and I am not alone who has this problem (and came to this solution): https://www.reddit.com/r/emacs/comments/8b9rvc/windows_emacs_in_taskbar_avoid_having_two_icons/ 

-- blami



[new:DrewAdams:2021-11-03 13:47 UTC]
I just do the same thing I've always done, in previous versions of Windows (back at least through Windows XP). I create a shortcut to `runemacs.exe` in the same folder as that executable. And I pin that shortcut to the task bar. Then I just click that pinned icon to start a new Emacs session.

No matter how many sessions I create, they all get piled onto the same icon that's created for the sessions (this icon is over to the right - it's not the icon that's pinned). Even if I create sessions in other ways than using a shortcut pinned to the task bar, and even if they're for other Emacs releases, they're all piled into the same icon (at the right). -- DrewAdams













== Right-Click Context Menu == 
You may want to add a command to "Open in Emacs" when you right click on files in Explorer. There are several solutions to that which you can find here: MsWindowsGlobalContextMenu


== Create File Associations ==

NOTE: After following the instructions below, emacs client doesn't work properly. For example, clicking on a .org file will create a new emacs window, even when one is already running (Windows 10, July 2019, Emacs 26.2).

To open text files with the emacs daemon, run cmd.exe as administrator use the commands and `ftype' and `assoc':

    ftype txtfile=emacsclientw -na runemacs "%1"
    ftype EmacsLisp=emacsclientw -na runemacs "%1"
    ftype CodeFile=emacsclientw -na runemacs "%1"
    assoc .txt=txtfile
    assoc .text=txtfile
    assoc .log=txtfile
    assoc .org=txtfile
    assoc .el=EmacsLisp
    assoc .c=CodeFile
    assoc .h=CodeFile

See WThirtyTwoFileAssociations for more info.

== Use `emacsclient' to edit git commits==

This seems to works:
{{{
  git config --global core.editor "C:/path/to/emacsclientw.exe --alternate-editor='C:/path/to/runemacs.exe' '%*'"
}}}

Be sure not to add -n to the command here. A non-blocking editor call will cause Git to fail, since it thinks you entered an empty commit message.

== Replace `notepad.exe' calls ==

A quick and dirty way to replace all ##notepad.exe## calls from any application (and your file manager) would be to use the Registry:

1. Start ##regedit.exe##

2. Go to ##HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion?\Image File Execution Options##

3. Add a new key named ##notepad.exe##

4. Add (in there) a new string named ##Debugger## and use this value: ##emacsclientw.exe -na runemacs.exe -F## (requires ##emacsclientw## to be in your ##PATH##)

Note that this will pretty much break the usual ##-F## behavior but it is needed as ##emacsclientw## has no [http://stackoverflow.com/questions/2984846/set-image-file-execution-options-will-always-open-the-named-exe-file-as-defaul -z parameter] (yet).


== Workaround to get `term'/`ansi-term' working with `cmd.exe' or Cygwin bash ==

Check out [https://github.com/d5884/fakecygpty fakecygpty]. This is your best bet to get `term'/`ansi-term' working with a proper shell on Windows with Win32 Emacs.

You will need Cygwin installed to build it.


= Run Emacs server automatically at windows startup =

The script creates a .bat file in your shell:startup folder. It also adds a line to delete any old emacs server data that may not have gotten cleaned, if the previous shutdown was dirty. Tested on Windows 10.

{{{
# Path to startup file
$startup_file = "$([Environment]::GetFolderPath('Startup'))\StartEmacsServer.bat"

# Introduce variable HOME:
# 1. for simplicity
# 2. runemacs.exe expects it to be
#
# %APPDATA% is chosen because runemacs.exe operates there
#	https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init
#	https://www.gnu.org/software/emacs/manual/html_node/emacs/General-Variables.html#General-Variables
New-Item $startup_file -type file
Set-Content -Path $startup_file -Value "set HOME=%APPDATA%"

# Clean previous server file info first
Add-Content -Path $startup_file -Value "del /Q ""%HOME%/.emacs.d/server/*"""
Add-Content -Path $startup_file -Value "runemacs.exe --daemon"

}}}

-----
The above script munges batch file and PowerShell scripting. It no longer works in Windows 10. It may have done in early days of PowerShell. PS does not recognize the ##%VAR%## format of variable substitution. Those vars are just treated literally.

This script runs in PowerShell. Tested in PS 7.1.5 and PS 5.1 (default on Win10). It writes a log file to the user *temp* folder for troubleshooting if needed.

* Copy the script into a ##.ps1## file in a local folder.
* Create a new shortcut in the StartUp folder.
* Format of the shortcut
** Path to PowerShell
** Name of script
** ##-ExecutionPolicy bypass## - ignore script restrictions for this script only
** ##-NoProfile## - saves time and prevents unexpected interactions
** ##-File## - name of script file, including absolute path
* Example shortcut entry

{{{
"C:\Program Files\PowerShell\7\pwsh.exe" -ExecutionPolicy Bypass -NoProfile -File  C:\Users\micha\Dropbox\src\powershell\emacsclient-on-startup.ps1
}}}
-----
{{{
# Start Emacs in daemon mode on system startup
# Michael Powe
# Usage:
# - put script in a local folder
# - open the Startup folder (`shell:StartUp` in the File Explorer)
# - create a new shortcut there and point it to the script.
# - "C:\Program Files\PowerShell\7\pwsh.exe" -ExecutionPolicy Bypass -NoProfile -File  C:\Users\micha\Dropbox\src\powershell\emacsclient-on-startup.ps1
# 20211106T013351

$env:SERVER_HOME="$env:APPDATA\.emacs.d"

# open log file
# overwrites each time server is started
# log file format:
# {micha} [4] --> cat .\StartupPSLog.txt
# 10:28:25.038 2021-11-08 Script started
# 10:28:28.127 2021-11-08 Script removed old server
# 10:28:28.137 2021-11-08 Starting server
# 10:28:31.548 2021-11-08 New emacs daemon has Process Id 7784
# 10:28:32.294 2021-11-08 Daemon started at 11/08/2021 10:28:28

Set-Content -Path $env:TEMP\StartupPSLog.txt -Value (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" Script started"))

# Warning - PS is lousy at recursively deleting directories that contain subdirectories. Sometimes, it pukes.
# Might need error trapping here.
if(Test-Path $env:SERVER_HOME\server\){
    # server directory found, remove artefacts
	Remove-Item -Force -Recurse $env:SERVER_HOME\server\*.*
	Add-Content -Path $env:TEMP\StartupPSLog.txt -Value (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" Script removed old server"))
} else {
    # new server, go
	Add-Content -Path $env:TEMP\StartupPSLog.txt -Value  (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" Old server not found "))
}

Add-Content -Path $env:TEMP\StartupPSLog.txt -Value (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" Starting server"))
#
# Do it
#
runemacs --daemon

# make a space for the service to start before looking for it below. Otherwise, it may not have come up yet.
Start-Sleep -Seconds 3

Add-Content -Path $env:TEMP\StartupPSLog.txt -Value (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" New emacs daemon has Process Id " + ((get-process "emacs").Id)))
Add-Content -Path $env:TEMP\StartupPSLog.txt -Value (([datetime]::Now.ToString("HH:mm:ss.fff yyyy-MM-dd")) + (" Daemon started at " + ((get-process "emacs").StartTime)))

}}}

-- Michael Powe, Mon Nov  8, 2021  3:03 PM
 
-----

You can also open Explorer, type in ##shell:startup## in the address bar, and press enter. In this startup folder, create a shortcut by right clicking and selecting new->shortcut. When asked for location, put the following: ##"X:\path\to\emacs\bin\runemacs.exe" --daemon## where you have substituted the proper path to runemacs.exe. This shortcut will run at startup. You can double click on the shortcut to start the Emacs server if it is not already running.

=== Simple server setup ===
The following is an adaptation (clarification?) of the above.  It's not clear what language the above script is written in.  Rather than create a script to write a 3 line script, this modification gives the smallest setup I could create.

Open Windows Explorer with `Win+E' and navigate to `shell:startup'.  Create a new file `StartEmacsServer.bat' using the right click context menu.  Right click this new file, select "Edit", and insert:

{{{
rem Sets HOME for current shell
set HOME=%APPDATA%

rem Clean previous server file info first
del /q ""%HOME%\\.emacs.d\\server\\*""
C:\emacs-27.1-x86_64\bin\runemacs.exe --daemon -c ""(setq default-directory "~/")""
rem start "" "C:\Users\<user>\Desktop\emacsclientw.exe - Shortcut.lnk"
}}}

`rem' is the Windows batch keyword for comments.  This script sets a HOME environment variable for the current cmd process, meaning it will not exist beyond the running of the script.  It then deletes the folder which contains Emacs server information.  `/q' means "quiet"; the user is not prompted whether to delete.  Double quotes are used to provide single quotes around the path, in case it contains spaces.  Finally, `runemacs.exe' is called with the `--daemon' flag, starting a background instance.  If you want to modify/debug this script, put `pause' at the end and the prompt will remain open.

Double clicking the script will start a new Emacs daemon.  To create a new frame, make a shortcut for `emacsclientw.exe'.  Right click on the shortcut and select "Properties". Set the "Target" as:

{{{
C:\emacs-27.1-x86_64\bin\emacsclientw.exe -create-frame --alternate-editor=""
}}}

This tells `emacsclientw.exe' to create a new frame within the Emacs daemon process.  If it fails, no alternative editor is to be opened.  Use this shortcut as the main entry point to Emacs.  In the last line of the above script, correct the path to match your shortcut and delete the leading `rem' to have a client frame open on startup.


== Debug Version ==
Sometimes it is useful to be able to start up default autonomous copy of Emacs (not client/server), for example if you play with your config file and something gets messed up.

Create a new shortcut to "emacs.exe".
Right click newly created shortcut and choose properties.
In ##target## field type: ##"X:\path\to\emacs\bin\emacs.exe" --debug-init##
Close properties dialog.

== No-Window Mode Over SSH ==
Emacs runs surprisingly well within the Windows command prompt over SSH.  I had challenges, however, setting the HOME directory and initializing init.el.  Emacs also complained about wanting to use `cmdproxy.exe'.  My solution was to create this batch file, place it the default connection directory, and run it immediately on login:

{{{
rem EmacsOnSSH.bat
rem Sets HOME for current shell; didn't seem to take, but won't hurt to set it
set HOME=%APPDATA%
rem Set SHELL to the Emacs provided cmdproxy, rather than the default cmd.
set SHELL="C:\emacs-27.1-x86_64\libexec\emacs\27.1\x86_64-w64-mingw32\cmdproxy.exe"

rem Forced the default directory by first changing dirs
cd %APPDATA%
rem The init didn't automatically load, regardless of where I started.  So, call it explicitly
C:\emacs-27.1-x86_64\bin\emacs.exe -nw -load .emacs.d\init.el
}}}

----

CategoryWThirtyTwo
