[[de:Easy_PG]]
!EasyPG is an all-in-one GnuPG interface for Emacs. It has two aspects: convenient tools to use !GnuPG from Emacs (##epa##), and a fully functional interface library to !GnuPG (##epg##).

* [[http://epg.sourceforge.jp/ Home page]]
* [[http://git.savannah.gnu.org/cgit/emacs.git/tree/lisp/epa-file.el Source code]]
* [[http://www.gnu.org/software/emacs/manual/epa.html Manual]] (`C-h i m EasyPG RET')

== Files ==

Setup for transparent, automatic encryption and decryption:

    (require 'epa-file)
    (epa-file-enable)

Now visit ##anything.gpg## and it will encrypt it when you save the buffer.

See AutoEncryption for alternatives.

== Using symmetric or public-key encryption always ==

If you always want a file encrypted with symmetric encryption, put the following at the top of your file:

    -*- epa-file-encrypt-to: nil -*-

To encrypt with a public key, but prevent EPG from prompting for a key every time you save a file, put the following at the top of your file:

    -*- epa-file-encrypt-to: ("your@email.address") -*-

EPA will prompt for the key only the first time you save the file, assuming you have the email address you specified in your keyring.

Alternatively, set [https://www.gnu.org/software/emacs/manual/html_node/epa/Encrypting_002fdecrypting-gpg-files.html#index-epa_002dfile_002dselect_002dkeys-43 `epa-file-select-keys'] to something other than `t' or `nil'.

== Comments ==

Note that easy-pg consists of two different kind of modules, one is a library (epg.el) and the others are applications (epa-*.el).  Auto-encryption (epa-file.el) is a part of the latter.  As the docs says "The !EasyPG Library dares to disable passphrase caching", that is intended behavior. Caveat user, if you start using the library directly. ;)

== Use the Minibuffer for Pasword Prompts ==

To make !EasyPG prompt for the GPG password in the minibuffer (rather than a GUI popup), Add the following to ##~/.gnupg/gpg-agent.conf##:

{{{
allow-emacs-pinentry
allow-loopback-pinentry
}}}

Add the following to your InitFile

{{{
(setq epa-pinentry-mode 'loopback)
}}}

Restart ##gpg-agent## for this to take effect.



== Gnus ==

AFAIK Gnus now prefers EasyPG for mail encryption (over PGG, mailcrypt...).

A working customization code (April 2011, using Debian, Emacs 23, No Gnus 0.16 (git version) and GnuPG 1) follows:
{{{
(require 'epg-config)
 (setq mml2015-use 'epg

       mml2015-verbose t
       epg-user-id gpgpgpkeyID
       mml2015-encrypt-to-self t
       mml2015-always-trust nil
       mml2015-cache-passphrase t
       mml2015-passphrase-cache-expiry '36000
       mml2015-sign-with-sender t

       gnus-message-replyencrypt t
       gnus-message-replysign t
       gnus-message-replysignencrypted t
       gnus-treat-x-pgp-sig t

;;       mm-sign-option 'guided
;;       mm-encrypt-option 'guided
       mm-verify-option 'always
       mm-decrypt-option 'always

       gnus-buttonized-mime-types
       '("multipart/alternative"
         "multipart/encrypted"
         "multipart/signed")

      epg-debug t ;;  then read the *epg-debug*" buffer
)
}}}

To solve problems first suppress any "encrypt-to" in your ~/.gnupg/gpg.conf (beware: it can lead to new problems because you may therefore produce cyphered files/mail NOT cyphered using your key)

== OS X ==

To use !EasyPG on OS X, you may try installing [https://gpgtools.org/ MacGPG2] for a graphical prompt, so that Emacs does not hang attempting to run ##pinentry-curses##.

== Caching Password for Symmetric Encryption==
Warning! This is risky if other people than you can access your own session. Despite you should always have to lock the screen when you leave your computer turned on, it is recommended you use this with caution.

One solution is to add a <code>~/.gnupg/gpg-agent.conf</code> file (if not already existent) and add the line, adjusting the number (in seconds) to the desired cache timeout :

    default-cache-ttl 1800 

Another suggestion is:
For some reason, using Emacs 24 and enabling <code>epa-file-cache-passphrase-for-symmetric-encryption</code> doesn't work and this is so because there's no elisp code for handling passphrase at the epg library (that have the base functions to interact with GPG tool).

So we need to edit <code>epg--start</code> function adding this behaviour. Apply this patch to the epg.el file:

{{{
*** epg.el	2014-11-14 18:42:27.809875834 -0300
--- epg-modified.el	2014-11-14 18:42:59.660206317 -0300
***************
*** 1140,1145 ****
--- 1140,1148 ----
  		       (if (and (not (eq (epg-context-protocol context) 'CMS))
  				(epg-context-progress-callback context))
  			   '("--enable-progress-filter"))
+ 		       (if (and (not (eq (epg-context-protocol context) 'CMS))
+ 				(epg-context-passphrase-callback context))
+ 			   '("--passphrase-fd" "0"))
  		       (if epg-gpg-home-directory
  			   (list "--homedir" epg-gpg-home-directory))
  		       (unless (eq (epg-context-protocol context) 'CMS)
***************
*** 1191,1199 ****
  			 epg-gpg-program)
  		       args)))
        (set-default-file-modes orig-mode))
      (set-process-filter process #'epg--process-filter)
!     (epg-context-set-process context process)))
  
  (defun epg--process-filter (process input)
    (if epg-debug
        (save-excursion
--- 1194,1224 ----
  			 epg-gpg-program)
  		       args)))
        (set-default-file-modes orig-mode))
+     (process-sending-password process context)
      (set-process-filter process #'epg--process-filter)
!     (epg-context-set-process context process)
!     ))
! 
  
+ (defun process-sending-password (process context)
+   (let ((passphrase (funcall
+ 		     (car (epg-context-passphrase-callback context))
+ 		     context 
+ 		     'SYM
+ 		     (cdr (epg-context-passphrase-callback context))))
+ 	)
+     (process-send-string process (concat passphrase "\n"))    
+     )
+   (with-current-buffer (process-buffer process)
+     (save-excursion
+       (goto-char (point-min))
+       (when (search-forward "DECRYPTION_FAILED" nil t)
+ 	(message "Decryption Failed... Password may be wrong?")
+ 	(setq epa-file-passphrase-alist nil)
+ 	)
+       )
+     )
+   )
  (defun epg--process-filter (process input)
    (if epg-debug
        (save-excursion
}}}

----
CategoryCryptography
CategoryInterface
