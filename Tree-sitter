[https://tree-sitter.github.io/tree-sitter/ Tree-sitter] offers a way to quickly parse a source code file, providing accurate syntax highlighting, indentation rules, and navigation.

tree-sitter is included in Emacs 29 and later.

== Configuration ==

Tree-sitter offers different features than emacs' native parser. two things are required to activate it:
# Install a Tree-sitter library for the required language.
# A major mode that invokes the Tree-sitter backend.

=== Step 1 ===

Emacs can automatically install a tree-sitter parser with `treesit-install-language-grammar'. If you have a C compiler installed, it will prompt for a language name.

<pre>
M-x treesit-install-language-grammar

Language: c
There is no recipe for c, do you want to build it interactively? (y or n) y
Enter the URL of the Git repository of the language grammar: https://github.com/tree-sitter/tree-sitter-c
Enter the tag or branch (default: default branch): <RET>
Enter the subdirectory in which the parser.c file resides (default: "src"): <RET>
Enter the C compiler to use (default: auto-detect): <RET>
Enter the C++ compiler to use (default: auto-detect): <RET>

Cloning repository
Compiling library
Library installed to ~/.emacs.d/tree-sitter/libtree-sitter-c.dll
</pre>

If a Git URL is not provided by default, you can copy one from [https://tree-sitter.github.io/tree-sitter/#parsers Tree-sitter's list of parsers]

By default, Emacs will look for library files in <code>~/.emacs.d/tree-sitter/</code>. If you compiled the language's parser manually, copy it to this directory.
=== Step 2 ===

You can use major modes that have `-ts-' in the name, such as `java-ts-mode'.

Emacs 29 provides the variable `major-mode-remap-alist' to redirect the major modes without having to modify the more complicated `auto-mode-alist' variable.

You can edit this value with `M-x customize-variable' or create the alist manually:

<pre>
(setq major-mode-remap-alist
  '((css-mode  . css-ts-mode)
    (rust-mode . rust-ts-mode)
    (ruby-mode . ruby-ts-mode)))
</pre>

This variable can also be Customized

It's worth consulting `auto-mode-alist' to know which major mode to remap, as it's less obvious what some modes are for, such as <code>'c-or-c++-mode'</code>. Some packages also modify this list.

When a major mode powered by Tree-sitter is selected, Emacs will try to load the (native) library for that language, and will give an error if it is not available. In UNIX/Linux this would be a .so file, and in Windows a .dll.

== Running Hooks ==
[new:Mahmoud Adam:2023-12-19 14:50 UTC]
To run the default hooks, I came up with this, which is either really stupid or really cool. -- MahmoudAdam
<pre>
(defun run-non-ts-hooks ()
  (let ((major-name (symbol-name major-mode)))
    (when (string-match-p ".*-ts-mode" major-name)
      (run-hooks (intern (concat (replace-regexp-in-string "-ts" "" major-name) "-hook"))))))

(add-hook 'prog-mode-hook 'run-non-ts-hooks)
</pre>
this checks if it's a ts mode then runs their counterparts
== History ==

Historically, Emacs, like many editors, has used heuristics (often [https://www.emacswiki.org/emacs/RegularExpression/ regular expressions]) for approximating the parse of a language to do syntax highlighting and code navigation in order to do it quickly.

== External Links ==

* [https://tree-sitter.github.io/tree-sitter/#parsers A list of Tree-sitter parsers you can install manually]
* [https://corwin.bru.st/emacs-tree-sitter/ Corwin Brust's archive of Windows compiled libraries]

CategoryProgramming
