*Scheme* is a dialect of the [[Lisp]] programming language, concentrating on the "functional" subset of Lisp that introduced *lexical scoping*, *closures*, and *first class continuations*.  Originally developed by GeraldSussman and GuySteele, the language has a very concise and clear standard. The [https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/ R5RS] Scheme standard is about <b>50 pages</b>, shorter than the index table of the Common Lisp specification. 

It is widely used for teaching and research of *programming language semantics*, and was influential on the design of Common Lisp.

== Implementations ==
There are dozens of implementations of Scheme including those below. See https://www.scheme.org/ and https://small.r7rs.org/wiki/ImplementationContrasts/ for longer lists.
* Chez Scheme -- A Scheme currently maintained by Cisco Systems
* Chibi -- Intended to be a small Scheme made to be a C extension language.
* Chicken -- A compiler for R5RS and (soon) R7RS Scheme.
* Gauche -- An R7RS Scheme intended to be a script interpreter.
* [[Guile]] -- Guile Scheme is GNU's official extension language.
* [https://conservatory.scheme.org/ikarus/ Ikarus] -- R6RS compiler.
* [MitSlashGnuScheme MIT/GNU Scheme] -- A Scheme that comes with an Emacs-like editor
* [[Racket]]

==Built-in packages==
* SchemeMode -- major mode for editing Scheme
* CmuScheme -- supports interacting with inferior Scheme processes
* ExScheme -- supports interacting with inferior MitSlashGnuScheme processes
* InfoLook -- Generic help look-up that supports Scheme Mode.

By default `M-x run-scheme' runs a command from CmuScheme (ExScheme also defines `run-scheme') which runs a Scheme REPL inside Emacs. This looks for a program name taken from `scheme-program-name', ##scheme## by default;you may change this to something like ##guile##.

==Other packages==
* GaucheScheme
* [http://www.nongnu.org/geiser/ Geiser] -- An advanced REPL that supports Guile and Racket.
* [http://github.com/rotty/dotfiles/tree/master/.emacs.d/lisp/ikarus-script.el|ikarus-script.el] -- Jump to source locations displayed in Ikarus error messages
* LspScheme - LanguageServerProtocol support for Scheme
* QuackMode -- A [[Racket]]-focused extension that also supports other Schemes.
* RunSchemeHere allows you to easily run multiple inferior ##run-scheme## processes. 
* [[Scheme48Mode]]
* SchemeComplete -- Provides R5RS and some SRFI symbol completion, and ElDoc support.
* SchemeLookup -- Lookup R5RS symbol at point.
* SlimeMode -- A Common Lisp REPL that handles rudimentary Scheme code.

== See Also ==

* [[Lisp]] -- The language of which Scheme is a dialect.
* GeraldSussman -- Co-creator of Scheme
* GuySteele -- Co-creator of Scheme
* EdWin -- An [[Emacsen]] written in Scheme, included in [MitSlashGnuScheme MIT Scheme]
* [StructureAndInterpretationOfComputerPrograms SICP] -- An infamous book on computer programming.

== External Links ==

* [http://www.scheme.org/ Official Website]
* [[http://www.splode.com/~friedman/software/emacs-lisp/src/czscm.el czscm]] -- Scheme interpreter in ELisp by NoahFriedman.
* Lisp:sie.el -- Scheme In Emacs, a Scheme-like interpreter implemented in ELisp, written by KalleOlaviNiemitalo, which see. 

----
CategoryProgramming
