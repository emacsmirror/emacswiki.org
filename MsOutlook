== Fetch mail from Exchange server ==

Just install Davmail (http://davmail.sourceforge.net/). It's a mail agent converting Exchange server into POP3 and IMAP server.

The only issue is that Davmail POP3 server *MIGHT* be better for Gnus.  See http://blog.binchen.org/posts/how-to-get-email-from-exchange-server-without-outlook.html for the details. I got the issue only in one company. I cannot reproduce it in other companies. Anyway, you can test IMAP/POP3 in one min at the beginning. So it's not a big deal.

Sometimes the default EWS url of server is modified. Then you need EWSEdtor (https://ewseditor.codeplex.com/) to find the url and set it up in Davmail

Now enjoy the world of Freedom. 

BTW, you can use a mail classifying software Popfile (http://getpopfile.org/) to classify mails because Popfile support IMAP and POP3.

== Use Emacs as the editor for Outlook==

Basically you grab the text of an Outlook email/reply/forwarded message/etc., use Emacs to edit the reply or create a new message, and return the result to the Outlook editing window.

You might be interested in doing the reverse : use Outlook as the "mail server" for Emacs : MessageOutlook

You need some glue to move the message between Emacs and Outlook.

-- can I do the same with Mozilla Mail ? http://globs.org/articles.php?lng=en&pg=2

== Excorporate: Use Emacs to access Exchange Calendar ==

You can access your Exchange calendar directly from within Emacs using *Excorporate*. [http://lists.gnu.org/archive/html/emacs-devel/2015-02/msg00482.html Learn more].

Excorporate is available in the GNU [[ELPA]] repository.

<pre>
M-x list-packages
</pre>

[h3]Using Excorporate with Office 365[/h3]

If the automatic configuration fails, and you use Office 365, you may find success with these settings:

<pre>
(setq excorporate-configuration '("user@domain.tld" . "https://outlook.office365.com/EWS/Exchange.asmx")))
</pre>

If this works for you, and you would like to store your credentials in your <code>.authinfo[.gpg]</code> file, the entry needs to be formatted as:

<pre>
machine outlook.office365.com:443 login user@domain.tld password secret
</pre>

As of version <code>0.9.1</code> Excorporate requires the port to be attached to the domain, not appended as <code>port 443</code>.

NOTE: Excorporate does not work with accounts that have MFA enabled: https://debbugs.gnu.org/cgi/bugreport.cgi?bug=50113

== Windows script glue ==

If your machine has the windows script host installed which should be true for almost all
versions currently in use (see
http://msdn.microsoft.com/library/default.asp?url=/nhp/default.asp?contentid=28001169)
then you can use the following script instead of python or tcl. It is merely a port from
tcl to Windows script.

Drop a copy of outlookedit.el from http://wiki.tcl.tk/9198 or
https://github.com/dholm/outlookedit into your load-path, add a (require 'outlookedit) to
your init file.

Save the following code with extension .wsf somewhere on your path and
adjust the variables mno-get-outlook-body and mno-put-outlook-body -- MartinStemplinger

<pre>
<?xml version="1.0" encoding="iso-8859-1"?>
<package>
  <job id="getMessage">
      <runtime>
          <description>
            This script gets a Message from an open Outlook window
      </description>
    </runtime>
    <script language="JScript">
      try {
        var app = new ActiveXObject("Outlook.Application");
        var inspector = app.ActiveInspector;
        
        WScript.StdOut.Write(inspector.CurrentItem.Body);       
      } catch (e) {
        WScript.Echo("Error: " + e)
      }
    </script>
  </job>
  <job id="putMessage">
    <runtime>
      <description>
        This script puts the content of StdIn back into an open Outlook
        window.
      </description>
    </runtime>
    <script language="JScript">
      try {
        var stdin = WScript.StdIn;                                 
        var app = new ActiveXObject("Outlook.Application");
        var inspector = app.ActiveInspector;
        var body = stdin.ReadAll();

       inspector.CurrentItem.Body= body;       
       inspector.display();
       inspector.Activate();
      } catch (e) {
       WScript.Echo("Error: " + e)
      }
    </script>
  </job>
</package>
</pre>

In outlookedit.el (assuming you put the wsf script in ~/bin) --TimAnderson

<pre>
 (defvar mno-get-outlook-body
   "cscript //B //Job:getMessage ~/bin/outlook_emacs.wsf")
 (defvar mno-put-outlook-body
   "cscript //B //Job:putMessage ~/bin/outlook_emacs.wsf")
</pre>

Now, in order to edit the currently opened mail in emacs, say `mno-edit-outlook-message' (bound to <code>C-c o e</code>). This opens an %%*Outlook Message*%% buffer with your mail. When you are done, say `mno-save-outlook-message' (bound to <code>C-c o s</code>). Attention, the text is sent back to the "current" mail ---if you switch back and forth between messages, you risk overwriting the bad message. 

The message has to be opened for Reply for the above to work (M-r in Outlook ;-)). I added the snippet after the line beginning <i>var inspector...</i> to remind myself:

<pre>
  // As above
  var inspector = app.ActiveInspector;

  // Reminder
  if (inspector == null) {
    WScript.StdOut.Write("You haven't opened the message up for Reply...");
    WScript.Quit(1);
  }
</pre>

=== Toolbar button ===

You can also add a macro to Outlook and place that macro on a customized button in the toolbar:

<pre>
Sub mnoEditInEmacs()
  Shell ("<PATH_TO_EMACS>\bin\gnudoit.exe (mno-edit-outlook-message)")
End Sub
</pre>

If you have a recent emacs and EmacsClient is setup, you may prefer to call <code>emacsclientw.exe --eval (mno-edit-outlook-message)</code>.

When you are replying to a mail, just press this button.

How to create a macro : in Outlook 2010, do a right-click on the Ribbon and select Customize Ribbon, then enable the Developer tab. In the Developer tab, there is a Macro menu that allow you to create a macro. To add the button, in the same Customize Ribbon, in the right column do Create a New Group. In the left column, select Choose Commands from: Macros, and you can add the button to the group you just added.

=== Forcing plain text mode ===

Attention, people have reported that some versions of Outlook don't react too well to scripts changing the format under their nose. It works for me with Outlook 2010. YMMV. Caveat emptor.

In the getMessage part of the WSF script, add the following (mostly stolen from Ernie Longmire):

<pre>...
    var inspector = app.ActiveInspector;
    var mailItem = inspector.CurrentItem;

    /* HTML messages store the full text of the body with HTML
     * markup in a separate string, MailItem.HTMLBody.  In these
     * messages MailItem.Body contains a version of the message
     * with HTML markup removed.

     * When editing an HTML message, .Body is not synchronized with
     * .HTMLBody until .Body is accessed directly in some way.
     * In these cases, changing .BodyFormat to olFormatPlain puts
     * the empty .Body string in the editing buffer, discarding the
     * actual message content.  That's why we explicitly reference
     * .Body below. */
    var junk = mailItem.Body;
    mailItem.BodyFormat = 1;

    WScript.StdOut.Write(mailItem.Body);
</pre>

== Python or Tcl glue ==

The original implementation of the idea was done in Python. Apparently, versions of Windows old enough will not have the necessary scripting infrastructure, and a glue in Tcl or Python is necessary.

* http://disgruntled-programmer.com/notes/emacs-with-outlook.html -- Requires Python to be installed to communicate with Outlook. ([http://web.archive.org/web/20040220113545/http://disgruntled-programmer.com/notes/emacs-with-outlook.html archive])

* http://wiki.tcl.tk/9198 -- Requires Tcl. 

* http://mini.net/tcl/EmacsOutlook -- Requires Tcl to be installed to communicate with Outlook (link broken as of 2012-11-18).

* https://github.com/dholm/outlookedit -- A git repository of outlookedit.el from http://wiki.tcl.tk/9198

:: <em>I just set this up under XP w/ Office XP and it worked beautifully.</em>&mdash;EphremChristopherWalborn

== Pymacs ==

I put together a small package based on the Python code mentioned above, but taking advantage of PyMacs for better integration. It provides two commands:

* outlook-load -- to load the e-mail reply body (or Notes, or Calendar entry) to an Emacs buffer;

* outlook-set -- to set it back. 

The code can be downloaded from my Emacs page at http://home.nc.rr.com/nascifandelaine/emacs.html -- NascifAbousalh

(snatched code from http://wiki.tcl.tk/9198)

Another python solution is at http://barnson.org/node/295 (but what's the point of going through some intermediate Tk application?)

== outlook.el ==

[https://github.com/asavonic/outlook.el Outlook.el] package can be used to send HTML or plain-text emails directly from Emacs, and they will look exactly as 
they were sent from MS Outlook with all fancy HTML formatting that Outlook usually does. It is meant to be used 
together with other email packages for Emacs, extending their functionality. 
As for now, only [https://github.com/djcb/mu mu4e] integration is supported.

The package does not depend on MS Outlook, so it can be used on Linux as well.

----
CategoryWThirtyTwo
WThirtyTwoSendMAPI
