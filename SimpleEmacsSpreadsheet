*Note:* ses.el is included in latest Emacs.

Simple Emacs Spreadsheet ([::SES], [::ses-mode] or [::SesMode]) is major mode in Emacs that mimics 
traditional SpreadSheet software, and uses EmacsLisp formulas.  It was written by Jonathan Vayner: 

* http://web.archive.org/web/20050306010917/home.comcast.net/~jyavner/ses/

Not sure whether this comment still applies:

: per author, not functional for xemacs because of [[text property]] differences

The latest release on news://gnu.emacs.sources said:

NEW FOR VERSION 21: Viral immunity, header line, sort by column,
customizable variables.  Also, great speed improvements and some
bugfixes.

* Create and edit simple spreadsheets with a minimum of fuss. 
* Full undo/redo/autosave. 
* Immune to viruses in spreadsheet files via use of UnsafeP.
* Cell formulas are straight Emacs Lisp; cell values are local variables in the spreadsheet's buffer.  To sum the first three cells in column B, say (+ B1 B2 B3) 
* Printer functions support fine control of cell appearance.  These can be just format strings.  To print dollars and cents, say "$%.2f"
* Intuitive keystroke commands: C-o = insert row, M-o = insert column, etc. 
* "Spillover" of lengthy cell values into following blank cells. 
* Header line shows column letters or a selected row. 
* Completing-read for entering symbols as cell values. 
* Cut, copy, and paste can transfer formulas and printer functions along with the cell values.
* Mouse commands for selecting a range and inserting it i nto a formula. 
* Import and export of tab-separated values or tab-separated formulas. 
* Plaintext, easily-hacked file format.

Example formulas:

    (ses-average (ses-range D2 D37))
    (apply (quote +) (ses-range B36 N36))

SES will come standard with version 22 of GnuEmacs.

Addons for SES,

* [[Chart]] -- stock quotes, with refresh.
* [http://furius.ca/pubcode/pub/conf/bin/ses2any.html ses2any] -- a script to convert SES files into other spreadsheet formats
* [https://github.com/Dewdrops/ses-noadvice ses-noadvice] -- this plugin reimplements ses' killing/yanking feature without using advices, so ses can cooperate well with some other emacs extensions like [http://www.emacswiki.org/emacs/VolatileHighlights volatile-highlights], etc.
  


[new]
I'm trying to write a simple eLisp function to automaticaly open an SES file and export its whole content to value. I'm facing problems of ses-export-tsv and region. Does anyone know how to write a lisp function to export the whole content ? Thanks.

[new]
This is what I use to write out a tsv file each time I save a ses buffer (PeterJones):

  (defun pmade:ses-export-buffer-to-tsv nil
    "Export the current SES buffer to a TSV file.  The file name
    will be derived from the current buffer name."
    (interactive)
    (let* ((fname (or (buffer-file-name) "export"))
           (bcell (get-text-property (point-min) 'intangible))
           (ecell (get-text-property (- (point-max) 2) 'intangible))
           (ses--curcell (cons bcell ecell)))
      (setq fname
            (if (string-match "\\..*$" fname)
                (replace-match ".tsv" nil nil fname)
              (concat fname ".tsv")))
      (ses-export-tab nil)
      (with-temp-file fname (insert (car kill-ring)))))

  (add-hook 'ses-mode-hook
    (lambda () 
      (add-hook 'after-save-hook 'pmade:ses-export-buffer-to-tsv t t)))


[new]
So I have numerous files that were manually indented into a tree structure, an outline, by hand. Attempting to paste these into SES failed, with an “inconsistent row lengths” error. I'm not surprised that the rows have inconsistent lengths.  I'd just like to get the data imported, and have enough columns to hold the line with the most tabs.  Only one cell should be filled in each row. Any solutions?

Well, I worked around the problem by appending 22 tabs to the end of each line, and then writing a keyboard macro that searched for the 20th tab on a line, deleting the rest of the line, and repeated that for each row in the file. That gave me a consistent number of tabs on each line, and then the yank into the spreadsheet worked... well, at least it didn't complain about inconsistent row lengths.  It still hasn't shown me the spreadsheet yet... pegging out the CPU... but the file does have 5000+ lines... still going... guess this spreadsheet is for puny data sets... After a two hours, I killed the emacs because it never finished, and never showed me a spreadsheet, other than the one cell one that I tried to paste into..

[new]
Functions to read/write a CSV file.

{{{
;; ses-csv.el -- Read/Write CSV file for SES
;; Author: Takashi Hattori (hattori@sfc.keio.ac.jp)
;; Requires: Ruby

(defun ses-read-from-csv-file (file)
  "Insert the contents of a CSV file named FILE into the current position."
  (interactive "fCSV file: ")
  (let ((buf (get-buffer-create "*ses-csv*"))
	text)
    (save-excursion
      (set-buffer buf)
      (erase-buffer)
      (process-file "ruby" file buf nil "-e" "require 'csv'; CSV::Reader.parse(STDIN) { |x| puts x.join(\"\\t\") }")
      (setq text (buffer-substring (point-min) (point-max))))
    (ses-yank-tsf text nil)))

(defun ses-write-to-csv-file (file)
  "Write the values of the current buffer into a CSV file named FILE."
  (interactive "FCSV file: ")
  (push-mark (point-min) t t)
  (goto-char (- (point-max) 1))
  (ses-set-curcell)
  (ses-write-to-csv-file-region file))

(defun ses-write-to-csv-file-region (file)
  "Write the values of the region into a CSV file named FILE."
  (interactive "FCSV file: ")
  (ses-export-tab nil)
  (let ((buf (get-buffer-create "*ses-csv*")))
    (save-excursion
      (set-buffer buf)
      (erase-buffer)
      (yank)
      (call-process-region (point-min) (point-max) "ruby" t buf nil "-e" "require 'csv'; w = CSV::Writer.create(STDOUT); STDIN.each { |x| w << x.chomp.split(/\\t/) }")
      (write-region (point-min) (point-max) file))))
}}}

----
CategoryCalculators
CategoryModes

