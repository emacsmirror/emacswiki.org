==Flavors of line-wrapping==

===Default===
By default, Emacs wraps a line that reaches the window width, either displaying a backslash (`\') in the buffer or placing a bent arrow (&#x21a9;) in the window [[fringe]].  This happens at character-level, not respecting word boundaries. The buffer text is not changed.
===Truncating===
To truncate lines rather than wrapping them, use TruncateLines.
===Visual-Line mode===
VisualLineMode wraps a line right before the window edge. The buffer text is not changed.
====Visual-Fill-Column mode====
VisualFillColumn (used in concert with VisualLineMode) wraps a line after the last word before `fill-column'. The buffer text is not changed.
===Auto-Fill mode===
AutoFillMode inserts a [[line ending]] after the last word that occurs before the value of [[option]] `fill-column' (a column number).  This changes the buffer text.

==Changes to default behavior==
===Enabling word-wrapping===
====Basic word-wrapping====
To use word-wrapping for continuation lines, set `word-wrap': i.e., ##M-: (setq word-wrap t)##, or placing it as a file variable ##-*- mode:blah ; word-wrap:t -*-## in your first line. 
====Word-wrapping by category====
Emacs 28 provides an additional word-wrapping feature called ##word-wrap-by-category##. This is supposed to improve word-wrapping for CJK and in similar contexts. But it can be also used, alternatively, for other unicode regions. For example, turning this boolean flag on ##(setq word-wrap-by-category t)##, and setting ##(modify-category-entry '(45 . 47) ?|)## adds ##",-/"## to the set of characters emacs will consider as word wrapping boundaries. This is helpful when using long URLs: e.g. if ##LINK## is longer than the line length, the line ##* LINK##, will be wrapped at the first space -- then the first line will be just ##*##, and LINK will start from the next line, and will be broken in half anyway because it's long. The modification described above will break LINK in the middle, so the first line will be ##* LIN## for some decently long prefix ##LIN## of ##LINK##, and the second line will contain just ##K##. 
=== Changing the line-wrap character ===
To disable the `##\##' character in line wrapping (copying from Emacs in a terminal can copy the character), remove it with a trick that is not well documented:

  M-: (set-display-table-slot standard-display-table 'wrap ?\ )

Notice that after the `##\##'  there is a whitespace character but you can use other characters.
==Manually filling paragraphs==
You can manually fill a paragraph with [[command]] `fill-paragraph' (<kbd>M-q</kbd>). Instead of wrapping a single line around to the next window line, the line is divided into two separate lines, separated by a line ending.

To unfill, i.e. remove all line-endings from a paragraph, options include:
* UnfillParagraph
* Repeatedly applying `delete-indentation' (<kbd>M-^</kbd>)
* Setting `fill-column' to a really large value and running `fill-paragraph'

==Comments on the flavors==
It's a nice trick. I suggest you also do ##(modify-category-entry 58 ?> (category-table) t)## to avoid unnecessary pain. When you have a line like ##* hello <spaces> :hello:hello:##, with ##<spaces>## such that the line wrap should occur somewhere in ##:hello:hello:##. Since initially, with ##(setq word-wrap-by-category t)##, according to ##kinsoku.el##, character ##:## belongs to category ##?>##, it is prohibited to be placed at the beginning of the line. So where to put the line break? The only possibility is right after the asterisk at the beginning of the line. It seems there is a conflict there between kinsoku and org.mode.

-- C.

==Specialist support==
===Mail===
# Mail read or written within Emacs can take advantage of FormatFlowed
===Org mode===
[new:IainDalton:2010-02-12 20:24 UTC]
Is there any code floating about that does "virtual indenting"--which is to indenting what visual-line-mode is to wrapping--like KDE's Kate?  The information needed to display lines at the right indentation may already be there--fill-paragraph does indentation as well as wrapping.  This would make editing someone else's non-wrapped code nicer, and make paragraphs in lists in markup languages (MarkDown, LaTeX, HTML) look nice without hard-wrapping, like:

<pre>
- This is a long paragraph in a list.  The quick brown fox jumped over
  the lazy dog.
</pre>

instead of

<pre>
- This is a long paragraph in a list.  The quick brown fox jumped over
the lazy dog.
</pre>

--- IainDalton

Just fix the second line by hand and then hit M-q or run fill-paragraph. Make sure that the paragraph is surrounded by blank lines (you can add some just to delete them later) so it wonâ€™t run two paragraphs together


Response to statement about fill-paragraph: doesn't fill-paragraph modify the buffer?  If I understand correctly, IainDalton's idea is that the original buffer contains one long line, but the display of that line should wrap the line *and* indent the subsequent lines according to syntax.  So the virtual indenting I'm interested in is effectively fill-paragraph on the display only, not the underlying buffer.  --- Spezzer 

RE: IainDalton's question.

The ELPA package <tt>adaptive-wrap</tt> provides the desired effect.

--- Chris

RE: IainDalton's question.

An easier solution which however only applies in <tt>org-mode</tt> is to simply use

<code>
(setq org-startup-indented t)
</code>

as described by http://orgmode.org/manual/Clean-view.html#Clean-view

--- N.N.


----
CategoryFilling
CategoryGlossary
